#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
EventBot AI v2.1 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å menu_files –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ ID
Telegram –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∞–Ω–∫–µ—Ç–Ω—ã—Ö —Å–º–µ—Ç
"""

import os
import sys
import asyncio
import logging
import signal
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict, Any
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π - –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è menu_files
sys.path.append(str(Path(__file__).parent))
sys.path.append(str(Path(__file__).parent / 'services'))
PROJECT_DIR = Path(__file__).parent.absolute()
os.chdir(PROJECT_DIR)

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ menu_files
MENU_FILES_DIR = PROJECT_DIR / "menu_files"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    file_handler = logging.FileHandler('logs/eventbot.log', encoding='utf-8')
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
    
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.WARNING)

setup_logging()
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
def check_dependencies():
    missing_deps = []
    
    try:
        from telegram import Update
        from telegram.ext import Application
    except ImportError:
        missing_deps.append("python-telegram-bot")
    
    try:
        from dotenv import load_dotenv
    except ImportError:
        missing_deps.append("python-dotenv")
    
    if missing_deps:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_deps)}")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install " + " ".join(missing_deps))
        sys.exit(1)

check_dependencies()

from dotenv import load_dotenv
load_dotenv()

def check_env_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = ['TELEGRAM_TOKEN']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        sys.exit(1)

check_env_variables()

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é
try:
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π MenuService –¥–ª—è —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ txt —Ñ–∞–π–ª–æ–≤
    try:
        from menu_service_table_format import MenuService  # –¢–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –∫–æ—Ä–Ω–µ
    except ImportError:
        from services.menu_service_table_format import MenuService  # –¢–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ services
    
    from services.claude_api_service import EnhancedClaudeAPIService, create_enhanced_claude_service
    from services.excel_estimate_generator import ExcelEstimateGenerator
    from services.catering_rules_service import CateringRulesService
    from services.client_database import ClientDatabase
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
    logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç SuperAIAgent
SUPER_AGENT_AVAILABLE = False
super_ai_agent = None
intelligent_assistant = None

try:
    from services.intelligent_manager_assistant import (
        SuperAIAgent, 
        create_super_ai_agent,
        create_intelligent_assistant
    )
    SUPER_AGENT_AVAILABLE = True
    logger.info("‚úÖ SuperAIAgent —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
except ImportError:
    try:
        from intelligent_manager_assistant import (
            SuperAIAgent, 
            create_super_ai_agent,
            create_intelligent_assistant
        )
        SUPER_AGENT_AVAILABLE = True
        logger.info("‚úÖ SuperAIAgent –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏!")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è SuperAIAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

class EventBotAI:
    """
    EventBot AI v2.1 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å menu_files
    """
    
    def __init__(self):
        self.token = os.getenv('TELEGRAM_TOKEN')
        self.manager_ids = self._parse_manager_ids()
        self.debug_mode = os.getenv('DEBUG_MODE', 'false').lower() == 'true'
        
        if not self.token:
            logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            sys.exit(1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self._initialize_services()
        self._log_startup_stats()
        
    def _parse_manager_ids(self) -> list:
        """–ü–∞—Ä—Å–∏–Ω–≥ ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        manager_ids_str = os.getenv('MANAGER_IDS', '')
        if not manager_ids_str:
            logger.warning("‚ö†Ô∏è MANAGER_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö")
            return []
        
        try:
            return [int(id.strip()) for id in manager_ids_str.split(',') if id.strip()]
        except ValueError:
            logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MANAGER_IDS")
            return []
    
    def _initialize_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å menu_files"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ EventBot...")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: MenuService —Å menu_files
            logger.info(f"üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MenuService —Å –ø–∞–ø–∫–æ–π: {MENU_FILES_DIR}")
            self.menu_service = MenuService(str(MENU_FILES_DIR))
            
            # Claude API
            claude_api_key = os.getenv("CLAUDE_API_KEY")
            if claude_api_key:
                self.claude_service = create_enhanced_claude_service(claude_api_key, "data")
                self.claude_service.load_menu_data()
                logger.info("‚úÖ Claude API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning("‚ö†Ô∏è CLAUDE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.claude_service = None
            
            self.excel_generator = ExcelEstimateGenerator()
            self.catering_rules = CateringRulesService()
            self.client_db = ClientDatabase()
            
            # –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∏
            logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–≤...")
            
            self.intelligent_assistant = None
            self.super_ai_agent = None
            
            if SUPER_AGENT_AVAILABLE and self.claude_service:
                try:
                    self.intelligent_assistant = create_intelligent_assistant(
                        self.claude_service, 
                        self.menu_service, 
                        self.catering_rules
                    )
                    if self.intelligent_assistant:
                        logger.info("‚úÖ Intelligent Assistant —Å–æ–∑–¥–∞–Ω")
                    
                    self.super_ai_agent = create_super_ai_agent(
                        self.claude_service, 
                        self.menu_service, 
                        self.catering_rules
                    )
                    
                    if self.super_ai_agent:
                        self.super_ai_agent.excel_generator = self.excel_generator
                        logger.info("üéâ –°–£–ü–ï–† –ò–ò-–ê–ì–ï–ù–¢ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤: {e}")
                    self.intelligent_assistant = None
                    self.super_ai_agent = None
            else:
                if not SUPER_AGENT_AVAILABLE:
                    logger.warning("‚ö†Ô∏è SuperAIAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                if not self.claude_service:
                    logger.warning("‚ö†Ô∏è Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            logger.error(traceback.format_exc())
            raise
    
    def _log_startup_stats(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            menu_stats = self.menu_service.get_menu_stats()
            
            logger.info("=" * 60)
            logger.info("ü§ñ EventBot AI v2.1 - –¢–ê–ë–õ–ò–ß–ù–´–ô –§–û–†–ú–ê–¢ TXT")
            logger.info("=" * 60)
            logger.info(f"üìÅ –ü–∞–ø–∫–∞ –º–µ–Ω—é: {MENU_FILES_DIR}")
            logger.info(f"üìÑ TXT —Ñ–∞–π–ª–æ–≤: {menu_stats.get('txt_files_count', 0)}")
            logger.info(f"üìä –ü–æ–∑–∏—Ü–∏–π –º–µ–Ω—é: {menu_stats['total_items']}")
            logger.info(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {menu_stats['categories']}")
            logger.info(f"üìã –§–æ—Ä–º–∞—Ç: –ê—Ä—Ç–∏–∫—É–ª‚Üí–ù–∞–∑–≤–∞–Ω–∏–µ‚Üí–û–ø–∏—Å–∞–Ω–∏–µ‚Üí–í–µ—Å‚Üí–¶–µ–Ω–∞")
            logger.info(f"üë• –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {len(self.manager_ids) if self.manager_ids else '–í—Å–µ'}")
            logger.info(f"ü§ñ Claude AI: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.claude_service and self.claude_service.is_available() else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
            logger.info(f"üß† SuperAI: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.super_ai_agent else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
            logger.info(f"üìä Excel: ‚úÖ –ì–æ—Ç–æ–≤")
            logger.info(f"üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã")
            logger.info(f"üöÄ –†–µ–∂–∏–º: {'üîß Debug' if self.debug_mode else '‚ö° Production'}")
            logger.info("=" * 60)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def _check_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.manager_ids:
            return True
        return user_id in self.manager_ids
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        first_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        logger.info(f"üë§ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {username} ({first_name}, ID: {user_id})")
        
        if not self._check_access(user_id):
            await update.message.reply_text(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω**\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –†–µ—Å—Ç–î–µ–ª–∏–≤–µ—Ä–∏.\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='Markdown'
            )
            return
        
        menu_stats = self.menu_service.get_menu_stats()
        claude_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if self.claude_service and self.claude_service.is_available() else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        super_ai_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if self.super_ai_agent else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        welcome_message = f"""
ü§ñ **EventBot AI v2.1 - –¢–ê–ë–õ–ò–ß–ù–´–ô –§–û–†–ú–ê–¢ –ì–û–¢–û–í!**

–ü—Ä–∏–≤–µ—Ç, {first_name}! üëã

‚ú® *–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–Ω–∫–µ—Ç–Ω—ã—Ö —Å–º–µ—Ç*

üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**
‚Ä¢ üìÅ –ü–∞–ø–∫–∞ –º–µ–Ω—é: **{MENU_FILES_DIR.name}**
‚Ä¢ üìÑ TXT —Ñ–∞–π–ª–æ–≤: **{menu_stats.get('txt_files_count', 0)}**
‚Ä¢ üìä –ü–æ–∑–∏—Ü–∏–π –º–µ–Ω—é: **{menu_stats['total_items']}**
‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: **{menu_stats['categories']}**  
‚Ä¢ üìã –§–æ—Ä–º–∞—Ç: **–ê—Ä—Ç–∏–∫—É–ª‚Üí–ù–∞–∑–≤–∞–Ω–∏–µ‚Üí–û–ø–∏—Å–∞–Ω–∏–µ‚Üí–í–µ—Å‚Üí–¶–µ–Ω–∞**
‚Ä¢ ü§ñ Claude AI: **{claude_status}**
‚Ä¢ üß† SuperAI: **{super_ai_status}**
‚Ä¢ üìä Excel: **üü¢ –ì–æ—Ç–æ–≤**

üéØ **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–º–µ—Ç—É:**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ `–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤ 50 —á–µ–ª–æ–≤–µ–∫ –±—é–¥–∂–µ—Ç 150–∫`
‚Ä¢ `–ë–∞–Ω–∫–µ—Ç 30 —á–µ–ª–æ–≤–µ–∫` 
‚Ä¢ `–§—É—Ä—à–µ—Ç 100 —á–µ–ª–æ–≤–µ–∫ –±—é–¥–∂–µ—Ç 200–∫`
‚Ä¢ `–ö–æ—Ñ–µ-–±—Ä–µ–π–∫ 25 —á–µ–ª–æ–≤–µ–∫`

üí° **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ v2.1:**
‚Ä¢ ‚úÖ –¢–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TXT (TSV)
‚Ä¢ ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ ID –∏–∑ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
‚Ä¢ ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π –±–ª—é–¥
‚Ä¢ ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—à–∏–±–∫–∏ —Å ID

üìû **–†–µ—Å—Ç–î–µ–ª–∏–≤–µ—Ä–∏** - –ü—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –±–∞–Ω–∫–µ—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ö–∞—Ç–∞–ª–æ–≥ –º–µ–Ω—é", callback_data="menu"),
             InlineKeyboardButton("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"), 
             InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="help")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é", callback_data="reload_menu"),
             InlineKeyboardButton("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="debug_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        if not self._check_access(user_id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        if query.data == "menu":
            await self.show_menu_catalog(query)
        elif query.data == "stats":
            await self.show_statistics(query)
        elif query.data == "help":
            await self.show_help(query)
        elif query.data == "calculator":
            await self.show_calculator(query)
        elif query.data == "reload_menu":
            await self.reload_menu_callback(query)
        elif query.data == "debug_menu":
            await self.debug_menu_callback(query)
        elif query.data == "force_reload":
            await self.force_reload_callback(query)
        elif query.data == "back_to_start":
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ start_command
            fake_update = type('obj', (object,), {
                'effective_user': query.from_user,
                'message': type('obj', (object,), {
                    'reply_text': query.edit_message_text
                })()
            })()
            await self.start_command(fake_update, None)
    
    async def reload_menu_callback(self, query):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é –∏–∑ txt —Ñ–∞–π–ª–æ–≤"""
        try:
            await query.edit_message_text("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é –∏–∑ txt —Ñ–∞–π–ª–æ–≤...")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é
            self.menu_service.reload_menu()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            menu_stats = self.menu_service.get_menu_stats()
            
            response = f"""
‚úÖ **–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ!**

üìä **–ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ üìÅ –ü–∞–ø–∫–∞: {MENU_FILES_DIR}
‚Ä¢ üìÑ TXT —Ñ–∞–π–ª–æ–≤: {menu_stats.get('txt_files_count', 0)}
‚Ä¢ üìã –ü–æ–∑–∏—Ü–∏–π: {menu_stats['total_items']}
‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {menu_stats['categories']}

üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**
"""
            
            for category, count in menu_stats.get('categories_detail', {}).items():
                response += f"‚Ä¢ {category}: {count} –ø–æ–∑–∏—Ü–∏–π\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                response,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            logger.info("‚úÖ –ú–µ–Ω—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ callback")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
            )
    
    async def debug_menu_callback(self, query):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–µ–Ω—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            await query.edit_message_text("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–µ–Ω—é...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            debug_info = self.menu_service.get_debug_info()
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ
            if len(debug_info) > 4000:
                parts = [debug_info[i:i+4000] for i in range(0, len(debug_info), 4000)]
                for i, part in enumerate(parts):
                    if i == 0:
                        await query.edit_message_text(f"```\n{part}\n```", parse_mode='Markdown')
                    else:
                        await query.message.reply_text(f"```\n{part}\n```", parse_mode='Markdown')
            else:
                await query.edit_message_text(f"```\n{debug_info}\n```", parse_mode='Markdown')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å –æ—Ç–ª–∞–¥–∫–æ–π", callback_data="force_reload")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                "üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:",
                reply_markup=reply_markup
            )
            
            logger.info("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–µ–Ω—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–µ–Ω—é: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–µ–Ω—é.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
            )
    
    async def force_reload_callback(self, query):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π"""
        try:
            await query.edit_message_text("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å –æ—Ç–ª–∞–¥–∫–æ–π
            debug_info = self.menu_service.force_reload_with_debug()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            menu_stats = self.menu_service.get_menu_stats()
            
            response = f"""
‚úÖ **–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
‚Ä¢ üìÑ TXT —Ñ–∞–π–ª–æ–≤: {menu_stats.get('txt_files_count', 0)}
‚Ä¢ üìã –ü–æ–∑–∏—Ü–∏–π: {menu_stats['total_items']}
‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {menu_stats['categories']}

üìÇ **–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**
"""
            
            for category, count in menu_stats.get('categories_detail', {}).items():
                response += f"‚Ä¢ {category}: {count} –ø–æ–∑–∏—Ü–∏–π\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                response,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            logger.info("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
            )
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é –∏–∑ txt —Ñ–∞–π–ª–æ–≤"""
        try:
            await query.edit_message_text("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é –∏–∑ txt —Ñ–∞–π–ª–æ–≤...")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é
            self.menu_service.reload_menu()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            menu_stats = self.menu_service.get_menu_stats()
            
            response = f"""
‚úÖ **–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ!**

üìä **–ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ üìÅ –ü–∞–ø–∫–∞: {MENU_FILES_DIR}
‚Ä¢ üìÑ TXT —Ñ–∞–π–ª–æ–≤: {menu_stats.get('txt_files_count', 0)}
‚Ä¢ üìã –ü–æ–∑–∏—Ü–∏–π: {menu_stats['total_items']}
‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {menu_stats['categories']}

üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**
"""
            
            for category, count in menu_stats.get('categories_detail', {}).items():
                response += f"‚Ä¢ {category}: {count} –ø–æ–∑–∏—Ü–∏–π\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                response,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            logger.info("‚úÖ –ú–µ–Ω—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ callback")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
            )
    
    async def show_menu_catalog(self, query):
        """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–µ–Ω—é"""
        try:
            categories = self.menu_service.get_available_categories()
            menu_stats = self.menu_service.get_menu_stats()
            
            catalog_text = f"""
üìã **–ö–∞—Ç–∞–ª–æ–≥ –º–µ–Ω—é –†–µ—Å—Ç–î–µ–ª–∏–≤–µ—Ä–∏**

üìä **–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ TXT —Ñ–∞–π–ª–æ–≤ (—Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç):**
‚Ä¢ üìÅ –ü–∞–ø–∫–∞: **{MENU_FILES_DIR.name}**
‚Ä¢ üìÑ TXT —Ñ–∞–π–ª–æ–≤: **{menu_stats.get('txt_files_count', 0)}**
‚Ä¢ üçΩÔ∏è –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: **{menu_stats['total_items']}**
‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: **{len(categories)}**
‚Ä¢ üìã –§–æ—Ä–º–∞—Ç: **–ê—Ä—Ç–∏–∫—É–ª‚Üí–ù–∞–∑–≤–∞–Ω–∏–µ‚Üí–û–ø–∏—Å–∞–Ω–∏–µ‚Üí–í–µ—Å‚Üí–¶–µ–Ω–∞**

üóÇÔ∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**
"""
            
            category_details = menu_stats.get('categories_detail', {})
            for i, (category, count) in enumerate(category_details.items(), 1):
                catalog_text += f"{i}. **{category}**: {count} –ø–æ–∑–∏—Ü–∏–π\n"
            
            catalog_text += f"""

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–µ—Ä—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.

üîç **–ü–æ–∏—Å–∫ –ø–æ –º–µ–Ω—é:**
–ù–∞–ø–∏—à–∏—Ç–µ "–ù–∞–π—Ç–∏ [–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞]" –∏–ª–∏ "–ù–∞–π—Ç–∏ [–∞—Ä—Ç–∏–∫—É–ª]" –¥–ª—è –ø–æ–∏—Å–∫–∞.

üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:**
–ú–µ–Ω—é –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ TXT —Ñ–∞–π–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ 1: –ê—Ä—Ç–∏–∫—É–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä B001)
‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ 2: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞  
‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ 3: –û–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ 4: –í–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö
‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ 5: –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é" –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            """
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="reload_menu")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                catalog_text, 
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–µ–Ω—é")
    
    async def show_statistics(self, query):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            menu_stats = self.menu_service.get_menu_stats()
            
            client_stats = {}
            try:
                client_stats = self.client_db.get_statistics()
            except:
                client_stats = {'total_clients': 0, 'total_orders': 0}
            
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ EventBot AI v2.1**

üìÅ **–°–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é (TXT —Ñ–∞–π–ª—ã):**
‚Ä¢ üìÇ –ü–∞–ø–∫–∞: **{MENU_FILES_DIR}**
‚Ä¢ üìÑ TXT —Ñ–∞–π–ª–æ–≤: **{menu_stats.get('txt_files_count', 0)}**
‚Ä¢ üçΩÔ∏è –ü–æ–∑–∏—Ü–∏–π –≤ –º–µ–Ω—é: **{menu_stats['total_items']}**
‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: **{menu_stats['categories']}**

ü§ñ **–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:**
‚Ä¢ üß† Claude AI: **{"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if self.claude_service and self.claude_service.is_available() else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}**
‚Ä¢ üéØ SuperAI: **{"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if self.super_ai_agent else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}**
‚Ä¢ üìä Excel: **‚úÖ –ì–æ—Ç–æ–≤**
‚Ä¢ üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: **‚úÖ –ê–∫—Ç–∏–≤–Ω–∞**

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:**
‚Ä¢ üë• –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: **{client_stats.get('total_clients', 0)}**
‚Ä¢ üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: **{client_stats.get('total_orders', 0)}**

üë• **–î–æ—Å—Ç—É–ø –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ üîê –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: **{len(self.manager_ids) if self.manager_ids else '–í—Å–µ'}**
‚Ä¢ üöÄ –†–µ–∂–∏–º: **{'üîß Debug' if self.debug_mode else '‚ö° Production'}**

‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {datetime.now().strftime('%H:%M:%S')}
üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}

üéØ **–í–µ—Ä—Å–∏—è:** 2.1 Professional (menu_files)
üè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** –†–µ—Å—Ç–î–µ–ª–∏–≤–µ—Ä–∏
            """
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é", callback_data="reload_menu")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                stats_text, 
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def show_calculator(self, query):
        """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
        calculator_text = """
üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–∞–Ω–∫–µ—Ç–Ω–æ–≥–æ –º–µ–Ω—é v2.1**

üìè **–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –≥—Ä–∞–º–º–æ–≤–∫–∏ –Ω–∞ 1 –≥–æ—Å—Ç—è:**

‚òï **–ö–æ—Ñ–µ-–±—Ä–µ–π–∫** (30-90 –º–∏–Ω):
‚Ä¢ –õ–µ–≥–∫–∏–π: 150-200–≥
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç: 200-250–≥
‚Ä¢ –ü–ª–æ—Ç–Ω—ã–π: 250-300–≥

üçπ **–§—É—Ä—à–µ—Ç** (2-3 —á–∞—Å–∞):
‚Ä¢ –≠–∫–æ–Ω–æ–º: 200-300–≥
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç: 300-400–≥
‚Ä¢ –ü—Ä–µ–º–∏—É–º: 400-500–≥

üçΩÔ∏è **–ë–∞–Ω–∫–µ—Ç** (3-5 —á–∞—Å–æ–≤):
‚Ä¢ –õ–µ–≥–∫–∏–π: 600-800–≥
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç: 800-1200–≥
‚Ä¢ –ü—Ä–µ–º–∏—É–º: 1200-1700–≥

üí∞ **–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –≥–æ—Å—Ç—è:**
‚Ä¢ –ö–æ—Ñ–µ-–±—Ä–µ–π–∫: 1000-2000‚ÇΩ
‚Ä¢ –§—É—Ä—à–µ—Ç: 2000-4000‚ÇΩ
‚Ä¢ –ë–∞–Ω–∫–µ—Ç: 4000-8000‚ÇΩ

üîß **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ v2.1:**
‚Ä¢ –ú–µ–Ω—é –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ TXT —Ñ–∞–π–ª–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ ID
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ —Å –±–ª—é–¥–∞–º–∏

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞!
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            calculator_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def show_help(self, query):
        """–°–ø—Ä–∞–≤–∫–∞"""
        help_text = f"""
‚ùì **–°–ø—Ä–∞–≤–∫–∞ EventBot AI v2.1**

üÜï **–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ v2.1:**
‚Ä¢ üìÅ –ú–µ–Ω—é –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –ø–∞–ø–∫–∏ **{MENU_FILES_DIR.name}**
‚Ä¢ üìÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ TXT (TSV)
‚Ä¢ üè∑Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ ID –∏–∑ –∞—Ä—Ç–∏–∫—É–ª–æ–≤  
‚Ä¢ üìù –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π –±–ª—é–¥
‚Ä¢ üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—à–∏–±–∫–∏ —Å ID

üìå **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!

üéØ **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ `–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤ 50 —á–µ–ª–æ–≤–µ–∫`
‚Ä¢ `–ë–∞–Ω–∫–µ—Ç 30 —á–µ–ª–æ–≤–µ–∫ –±—é–¥–∂–µ—Ç 100–∫`  
‚Ä¢ `–§—É—Ä—à–µ—Ç 100 —á–µ–ª–æ–≤–µ–∫ –±—é–¥–∂–µ—Ç 250–∫`
‚Ä¢ `–ö–æ—Ñ–µ-–±—Ä–µ–π–∫ 25 —á–µ–ª–æ–≤–µ–∫`

üìÑ **–¢–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TXT —Ñ–∞–π–ª–æ–≤:**
```
–ê—Ä—Ç–∏–∫—É–ª	–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ	–û–ø–∏—Å–∞–Ω–∏–µ	–í–µ—Å (–≥)	–¶–µ–Ω–∞ (‚ÇΩ)
B001	–ì–æ–≤—è–∂–∏–π –±–æ–∫ –Ω–∞ –ø—é—Ä–µ	–ù–µ–∂–Ω–∞—è –≥–æ–≤—è–¥–∏–Ω–∞	250	1150
K001	–ö–∞–Ω–∞–ø–µ —Å –ª–æ—Å–æ—Å–µ–º	–ò–∑—ã—Å–∫–∞–Ω–Ω–æ–µ –∫–∞–Ω–∞–ø–µ	30	180
```
–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: —Ç–∞–±—É–ª—è—Ü–∏—è (TAB)

üí° **–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:**
1. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π
2. –£—Ç–æ—á–Ω—è–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
3. –û–±–æ–∑–Ω–∞—á–∞–π—Ç–µ –±—é–¥–∂–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
4. –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å"

üì± **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `–ù–∞–π—Ç–∏ [–±–ª—é–¥–æ]` - –ü–æ–∏—Å–∫ –≤ –º–µ–Ω—é
‚Ä¢ `–ù–∞–π—Ç–∏ [–∞—Ä—Ç–∏–∫—É–ª]` - –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É

üè¢ **–†–µ—Å—Ç–î–µ–ª–∏–≤–µ—Ä–∏** - –í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä!
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            help_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        first_name = update.effective_user.first_name or "–ú–µ–Ω–µ–¥–∂–µ—Ä"
        
        if not self._check_access(user_id):
            await update.message.reply_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            return
        
        request_text = update.message.text
        logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} ({first_name}): {request_text[:100]}...")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–∏—Å–∫–∞
        if request_text.lower().startswith("–Ω–∞–π—Ç–∏ "):
            await self.search_menu(update, request_text[6:])
            return
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, 
            action="typing"
        )
        
        try:
            user_info = {
                'id': user_id,
                'username': username,
                'first_name': first_name,
                'last_name': update.effective_user.last_name or '',
                'chat_id': update.effective_chat.id
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SuperAIAgent –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.super_ai_agent:
                logger.info("üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º SuperAIAgent –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                try:
                    response = await self.super_ai_agent.process_super_request(
                        request_text, 
                        user_info
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Excel —Ñ–∞–π–ª –≤ –æ—Ç–≤–µ—Ç–µ
                    excel_file_path = None
                    excel_pattern = r'üìä \*\*Excel —Ñ–∞–π–ª –≥–æ—Ç–æ–≤!\*\* –§–∞–π–ª: `([^`]+)`'
                    match = re.search(excel_pattern, response)
                    
                    if match:
                        excel_file_path = match.group(1)
                        response = re.sub(
                            r'\n\nüìä \*\*Excel —Ñ–∞–π–ª –≥–æ—Ç–æ–≤!\*\*.*', 
                            '', 
                            response
                        )
                    
                    await update.message.reply_text(
                        response, 
                        parse_mode='Markdown'
                    )
                    logger.info("‚úÖ SuperAI –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    
                    if excel_file_path and Path(excel_file_path).exists():
                        await self.send_excel_file(update, excel_file_path)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ SuperAI: {e}")
                    await self.process_estimate_request_legacy(update, context)
                
                return
            
            # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –ø–æ–º–æ—â–Ω–∏–∫—É
            elif self.intelligent_assistant:
                logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º Intelligent Assistant")
                
                try:
                    response = await self.intelligent_assistant.get_smart_response(
                        request_text
                    )
                    await update.message.reply_text(
                        response, 
                        parse_mode='Markdown'
                    )
                    logger.info("‚úÖ Basic –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Intelligent Assistant: {e}")
                    await self.process_estimate_request_legacy(update, context)
                
                return
            
            # Fallback –∫ –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
            else:
                logger.info("üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
                await self.process_estimate_request_legacy(update, context)
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            import traceback
            logger.error(traceback.format_exc())
            
            await update.message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å\n"
                "‚Ä¢ –£–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n"
                "–ü—Ä–∏–º–µ—Ä: `–§—É—Ä—à–µ—Ç 50 —á–µ–ª–æ–≤–µ–∫ –±—é–¥–∂–µ—Ç 150000`",
                parse_mode='Markdown'
            )
    
    async def search_menu(self, update: Update, search_query: str):
        """–ü–æ–∏—Å–∫ –ø–æ –º–µ–Ω—é"""
        try:
            results = self.menu_service.search_items(search_query)
            
            if results:
                response = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{search_query}'**\n\n"
                for i, item in enumerate(results[:10], 1):
                    response += f"{i}. **{item['name']}**\n"
                    if item.get('article'):
                        response += f"   –ê—Ä—Ç–∏–∫—É–ª: {item['article']}\n"
                    response += f"   ID: {item.get('id', 'N/A')}\n"
                    response += f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['category']}\n"
                    response += f"   –¶–µ–Ω–∞: {item['price']}‚ÇΩ\n"
                    if item.get('description'):
                        response += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}\n"
                    response += "\n"
                
                if len(results) > 10:
                    response += f"\n_...–∏ –µ—â–µ {len(results) - 10} –ø–æ–∑–∏—Ü–∏–π_"
            else:
                response = f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –º–µ–Ω—é")
    
    async def send_excel_file(self, update: Update, file_path: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Excel —Ñ–∞–π–ª–∞"""
        try:
            logger.info(f"üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª: {file_path}")
            
            with open(file_path, 'rb') as excel_file:
                filename = Path(file_path).name
                
                caption = (
                    "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å–º–µ—Ç–∞ –≤ Excel**\n\n"
                    "‚úÖ –ü–æ–ª–Ω–æ–µ –º–µ–Ω—é —Å –≥—Ä–∞–º–º–æ–≤–∫–æ–π\n"
                    "‚úÖ –†–∞—Å—á–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏ —É—Å–ª—É–≥\n"
                    "‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å\n\n"
                    "üìû –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: support@restdelivery.ru"
                )
                
                await update.message.reply_document(
                    document=excel_file,
                    filename=filename,
                    caption=caption,
                    parse_mode='Markdown'
                )
                
            logger.info("‚úÖ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel: {e}")
            await update.message.reply_text(
                f"‚ö†Ô∏è Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.\n"
                f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: `{file_path}`",
                parse_mode='Markdown'
            )
    
    async def process_estimate_request_legacy(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Legacy –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        await update.message.reply_text(
            "üîÑ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...**\n\n"
            "‚ö†Ô∏è SuperAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞.\n"
            "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Claude API.",
            parse_mode='Markdown'
        )
    
    def setup_handlers(self, application: Application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("menu", self.menu_command))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_message)
        )
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        fake_query = type('obj', (object,), {
            'edit_message_text': update.message.reply_text
        })()
        await self.show_help(fake_query)
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /menu"""
        fake_query = type('obj', (object,), {
            'edit_message_text': update.message.reply_text
        })()
        await self.show_menu_catalog(fake_query)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            application = (
                Application.builder()
                .token(self.token)
                .connect_timeout(30.0)
                .read_timeout(30.0)
                .build()
            )
            
            self.setup_handlers(application)
            
            logger.info("üöÄ EventBot AI v2.1 –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            logger.info(f"üìÅ –ú–µ–Ω—é –∏–∑: {MENU_FILES_DIR}")
            logger.info(f"üß† SuperAI: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.super_ai_agent else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
            logger.info("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π")
            logger.info("üîó –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True,
                timeout=30,
                pool_timeout=30
            )
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
            raise

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
    logger.info("üëã EventBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(0)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        import signal
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        directories = ['logs', 'data', 'output', 'backup', 'output/estimates', str(MENU_FILES_DIR)]
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
        
        logger.info("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        logger.info(f"üìÅ –ü–∞–ø–∫–∞ menu_files: {MENU_FILES_DIR}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ txt —Ñ–∞–π–ª–æ–≤
        if MENU_FILES_DIR.exists():
            txt_files = list(MENU_FILES_DIR.glob("*.txt"))
            logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ txt —Ñ–∞–π–ª–æ–≤: {len(txt_files)}")
            for txt_file in txt_files:
                logger.info(f"  - {txt_file.name}")
        else:
            logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {MENU_FILES_DIR} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EventBot...")
        bot = EventBotAI()
        bot.run()
        
    except KeyboardInterrupt:
        logger.info("üëã EventBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main()