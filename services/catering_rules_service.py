#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô CateringRulesService v2.1 - FORCED RELOAD
–í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤!
"""

import logging
from typing import Dict, List, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

# –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
print("üî• –ó–ê–ì–†–£–ñ–ê–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô CateringRulesService v2.1!")
logger.critical("üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê CateringRulesService!")

class CateringRulesService:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–µ—Ä–≤–∏—Å —Ä–∞—Å—á–µ—Ç–∞ - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self):
        print("üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û CateringRulesService!")
        logger.critical("üîß –°–û–ó–î–ê–ï–¢–°–Ø –ù–û–í–´–ô CateringRulesService v2.1!")
        
        # –ü–†–ê–í–ò–õ–¨–ù–´–ï —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã Rest Delivery
        self.event_standards = {
            '–∫–æ—Ñ–µ-–±—Ä–µ–π–∫': {
                '–≥—Ä–∞–º–º–æ–≤–∫–∞_–º–∏–Ω': 200,
                '–≥—Ä–∞–º–º–æ–≤–∫–∞_–º–∞–∫—Å': 300,
                '—Ü–µ–Ω–∞_–º–∏–Ω': 1500,
                '—Ü–µ–Ω–∞_–º–∞–∫—Å': 2500,
                '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–ø–µ—Ä—Å–æ–Ω–∞–ª–∞': 0.03
            },
            '—Ñ—É—Ä—à–µ—Ç': {
                '–≥—Ä–∞–º–º–æ–≤–∫–∞_–º–∏–Ω': 300,
                '–≥—Ä–∞–º–º–æ–≤–∫–∞_–º–∞–∫—Å': 500,
                '—Ü–µ–Ω–∞_–º–∏–Ω': 2500,
                '—Ü–µ–Ω–∞_–º–∞–∫—Å': 4500,
                '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–ø–µ—Ä—Å–æ–Ω–∞–ª–∞': 0.05
            },
            '–±–∞–Ω–∫–µ—Ç': {
                '–≥—Ä–∞–º–º–æ–≤–∫–∞_–º–∏–Ω': 600,
                '–≥—Ä–∞–º–º–æ–≤–∫–∞_–º–∞–∫—Å': 1200,
                '—Ü–µ–Ω–∞_–º–∏–Ω': 4000,
                '—Ü–µ–Ω–∞_–º–∞–∫—Å': 8000,
                '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–ø–µ—Ä—Å–æ–Ω–∞–ª–∞': 0.1
            }
        }
        
        logger.critical("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –°–¢–ê–ù–î–ê–†–¢–´ –ó–ê–ì–†–£–ñ–ï–ù–´!")
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –°–¢–ê–ù–î–ê–†–¢–´ –ó–ê–ì–†–£–ñ–ï–ù–´!")
    
    def calculate_estimate(self, 
                         menu_items: List[Dict[str, Any]], 
                         guest_count: int, 
                         event_type: str = '—Ñ—É—Ä—à–µ—Ç',
                         target_budget: Optional[float] = None) -> Dict[str, Any]:
        """
        üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
        """
        print(f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ê–°–ß–ï–¢ –ó–ê–ü–£–©–ï–ù! –ì–æ—Å—Ç–µ–π: {guest_count}, –¢–∏–ø: {event_type}")
        logger.critical(f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ê–°–ß–ï–¢! –ì–æ—Å—Ç–µ–π: {guest_count}, –¢–∏–ø: {event_type}")
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            event_type = self._normalize_event_type(event_type)
            standards = self.event_standards.get(event_type, self.event_standards['—Ñ—É—Ä—à–µ—Ç'])
            
            print(f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã: {standards}")
            logger.critical(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã: {standards}")
            
            # –ü–†–û–°–¢–û–ô –ò –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–∞—Å—á–µ—Ç
            target_cost_per_guest = (standards['—Ü–µ–Ω–∞_–º–∏–Ω'] + standards['—Ü–µ–Ω–∞_–º–∞–∫—Å']) / 2
            target_weight_per_guest = (standards['–≥—Ä–∞–º–º–æ–≤–∫–∞_–º–∏–Ω'] + standards['–≥—Ä–∞–º–º–æ–≤–∫–∞_–º–∞–∫—Å']) / 2
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥
            limited_items = menu_items[:8]  # –ú–∞–∫—Å–∏–º—É–º 8 –±–ª—é–¥
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –º–µ–Ω—é
            menu_cost = 0
            processed_items = []
            total_weight_per_guest = 0
            
            for i, item in enumerate(limited_items):
                # –ü—Ä–æ—Å—Ç–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - 1-2 –ø–æ—Ä—Ü–∏–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞
                quantity = guest_count + (guest_count // 3)  # +33% –∑–∞–ø–∞—Å
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞ –ø–æ—Ä—Ü–∏—é
                item_price = min(item.get('price', 200), 1000)  # –ú–∞–∫—Å–∏–º—É–º 1000‚ÇΩ –∑–∞ –ø–æ—Ä—Ü–∏—é
                item_weight = item.get('weight', 100)
                
                item_total_cost = quantity * item_price
                item_weight_per_guest = (quantity * item_weight) / guest_count
                
                processed_items.append({
                    'id': item.get('id', i+1),
                    'name': item.get('name', f'–ë–ª—é–¥–æ {i+1}'),
                    'quantity': quantity,
                    'price': item_price,
                    'total_cost': item_total_cost,
                    'weight_per_person': item_weight_per_guest
                })
                
                menu_cost += item_total_cost
                total_weight_per_guest += item_weight_per_guest
            
            # –ó–ê–©–ò–¢–ê –æ—Ç –±–µ–∑—É–º–Ω—ã—Ö —Ü–µ–Ω
            max_reasonable_menu_cost = guest_count * target_cost_per_guest * 0.7  # 70% –Ω–∞ –º–µ–Ω—é
            if menu_cost > max_reasonable_menu_cost:
                print(f"‚ö†Ô∏è –ö–û–†–†–ï–ö–¢–ò–†–£–ï–ú –¶–ï–ù–£! –ë—ã–ª–æ: {menu_cost}, —Å—Ç–∞–Ω–µ—Ç: {max_reasonable_menu_cost}")
                correction_factor = max_reasonable_menu_cost / menu_cost
                menu_cost = max_reasonable_menu_cost
                for item in processed_items:
                    item['total_cost'] *= correction_factor
            
            # –ó–ê–©–ò–¢–ê –æ—Ç –±–µ–∑—É–º–Ω–æ–π –≥—Ä–∞–º–º–æ–≤–∫–∏  
            if total_weight_per_guest > standards['–≥—Ä–∞–º–º–æ–≤–∫–∞_–º–∞–∫—Å']:
                print(f"‚ö†Ô∏è –ö–û–†–†–ï–ö–¢–ò–†–£–ï–ú –ì–†–ê–ú–ú–û–í–ö–£! –ë—ã–ª–æ: {total_weight_per_guest}, —Å—Ç–∞–Ω–µ—Ç: {standards['–≥—Ä–∞–º–º–æ–≤–∫–∞_–º–∞–∫—Å']}")
                total_weight_per_guest = standards['–≥—Ä–∞–º–º–æ–≤–∫–∞_–º–∞–∫—Å']
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —É—Å–ª—É–≥ (30% –æ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
            service_cost = menu_cost * 0.43  # 30/70 = 0.43
            total_cost = menu_cost + service_cost
            cost_per_guest = total_cost / guest_count
            
            print(f"üí∞ –ò–¢–û–ì–û–í–´–ï –†–ê–°–ß–ï–¢–´:")
            print(f"  –ú–µ–Ω—é: {menu_cost:,.0f}‚ÇΩ")
            print(f"  –£—Å–ª—É–≥–∏: {service_cost:,.0f}‚ÇΩ") 
            print(f"  –ò–¢–û–ì–û: {total_cost:,.0f}‚ÇΩ ({cost_per_guest:,.0f}‚ÇΩ/—á–µ–ª)")
            print(f"  –ì—Ä–∞–º–º–æ–≤–∫–∞: {total_weight_per_guest:.0f}–≥/—á–µ–ª")
            
            logger.critical(f"üí∞ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {total_cost:,.0f}‚ÇΩ ({cost_per_guest:,.0f}‚ÇΩ/—á–µ–ª)")
            logger.critical(f"üìä –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ì–†–ê–ú–ú–û–í–ö–ê: {total_weight_per_guest:.0f}–≥/—á–µ–ª")
            
            estimate = {
                'id': f"FIXED-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
                'event_type': event_type.title(),
                'guest_count': guest_count,
                'menu_items': processed_items,
                'menu_cost': menu_cost,
                'menu_items_count': len(processed_items),
                'weight_per_person': total_weight_per_guest,
                'service_cost': service_cost,
                'total_cost': total_cost,
                'cost_per_guest': cost_per_guest,
                'standards': standards,
                'warnings': [],
                'created_at': datetime.now().isoformat(),
                'version': 'FIXED-v2.1'
            }
            
            return estimate
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –í –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ú –†–ê–°–ß–ï–¢–ï: {e}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            import traceback
            print(traceback.format_exc())
            return self._create_emergency_estimate(guest_count, event_type)
    
    def _normalize_event_type(self, event_type: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        event_type = event_type.lower()
        
        if '–±–∞–Ω–∫–µ—Ç' in event_type:
            return '–±–∞–Ω–∫–µ—Ç'
        elif '—Ñ—É—Ä—à–µ—Ç' in event_type:
            return '—Ñ—É—Ä—à–µ—Ç'  
        elif '–∫–æ—Ñ–µ' in event_type or '–±—Ä–µ–π–∫' in event_type:
            return '–∫–æ—Ñ–µ-–±—Ä–µ–π–∫'
        else:
            return '—Ñ—É—Ä—à–µ—Ç'
    
    def _create_emergency_estimate(self, guest_count: int, event_type: str) -> Dict[str, Any]:
        """–ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–º–µ—Ç–∞"""
        event_type = self._normalize_event_type(event_type)
        standards = self.event_standards.get(event_type, self.event_standards['—Ñ—É—Ä—à–µ—Ç'])
        
        cost_per_guest = (standards['—Ü–µ–Ω–∞_–º–∏–Ω'] + standards['—Ü–µ–Ω–∞_–º–∞–∫—Å']) / 2
        total_cost = cost_per_guest * guest_count
        
        print(f"üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –°–ú–ï–¢–ê: {total_cost:,.0f}‚ÇΩ ({cost_per_guest:,.0f}‚ÇΩ/—á–µ–ª)")
        
        return {
            'id': f"EMERGENCY-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
            'event_type': event_type.title(),
            'guest_count': guest_count,
            'menu_items': [{'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä', 'quantity': guest_count, 'price': cost_per_guest}],
            'menu_cost': total_cost * 0.7,
            'service_cost': total_cost * 0.3,
            'total_cost': total_cost,
            'cost_per_guest': cost_per_guest,
            'weight_per_person': (standards['–≥—Ä–∞–º–º–æ–≤–∫–∞_–º–∏–Ω'] + standards['–≥—Ä–∞–º–º–æ–≤–∫–∞_–º–∞–∫—Å']) / 2,
            'warnings': ['üö® –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º'],
            'created_at': datetime.now().isoformat(),
            'version': 'EMERGENCY'
        }