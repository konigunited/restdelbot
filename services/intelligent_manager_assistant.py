#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß† SuperAIAgent - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è EventBot
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞ –†–µ—Å—Ç–î–µ–ª–∏–≤–µ—Ä–∏
"""

import logging
import re
from typing import Dict, Any, Optional, List, Tuple
from datetime import datetime
import json
from pathlib import Path

logger = logging.getLogger(__name__)


class IntelligentAssistant:
    """–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"""
    
    def __init__(self, claude_service, menu_service, catering_rules):
        self.claude_service = claude_service
        self.menu_service = menu_service
        self.catering_rules = catering_rules
        logger.info("‚úÖ IntelligentAssistant –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def get_smart_response(self, user_message: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            request_type = self._analyze_request_type(user_message)
            
            if request_type == "estimate":
                return await self._handle_estimate_request(user_message)
            elif request_type == "menu_info":
                return await self._handle_menu_info(user_message)
            elif request_type == "pricing":
                return await self._handle_pricing_info(user_message)
            else:
                return await self._handle_general_request(user_message)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ IntelligentAssistant: {e}")
            return "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
    
    def _analyze_request_type(self, message: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        message_lower = message.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        estimate_keywords = ['—á–µ–ª–æ–≤–µ–∫', '–ø–µ—Ä—Å–æ–Ω', '–≥–æ—Å—Ç–µ–π', '–±—é–¥–∂–µ—Ç', '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', '–±–∞–Ω–∫–µ—Ç', '—Ñ—É—Ä—à–µ—Ç']
        menu_keywords = ['–º–µ–Ω—é', '–±–ª—é–¥–∞', '—á—Ç–æ –µ—Å—Ç—å', '–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', '–ø–æ–∑–∏—Ü–∏–∏']
        pricing_keywords = ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ', '—Ç–∞—Ä–∏—Ñ', '–ø—Ä–∞–π—Å']
        
        if any(keyword in message_lower for keyword in estimate_keywords):
            return "estimate"
        elif any(keyword in message_lower for keyword in menu_keywords):
            return "menu_info"
        elif any(keyword in message_lower for keyword in pricing_keywords):
            return "pricing"
        else:
            return "general"
    
    async def _handle_estimate_request(self, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ—Ç—É"""
        return (
            "üìã –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Ñ—É—Ä—à–µ—Ç, –±–∞–Ω–∫–µ—Ç, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤)\n"
            "‚Ä¢ –ñ–µ–ª–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)\n\n"
            "–ü—Ä–∏–º–µ—Ä: `–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤ 50 —á–µ–ª–æ–≤–µ–∫ –±—é–¥–∂–µ—Ç 150000`"
        )
    
    async def _handle_menu_info(self, message: str) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—é"""
        menu_stats = self.menu_service.get_menu_stats()
        return (
            f"üìã **–ù–∞—à–µ –º–µ–Ω—é:**\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {menu_stats['total_items']}\n"
            f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {menu_stats['categories']}\n\n"
            f"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
            f"‚Ä¢ –ö–∞–Ω–∞–ø–µ –∏ –±—Ä—É—Å–∫–µ—Ç—Ç—ã\n"
            f"‚Ä¢ –°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏\n"
            f"‚Ä¢ –ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞\n"
            f"‚Ä¢ –î–µ—Å–µ—Ä—Ç—ã\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –º–µ–Ω—é!"
        )
    
    async def _handle_pricing_info(self, message: str) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö"""
        return (
            "üí∞ **–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ü–µ–Ω—ã:**\n\n"
            "**–ö–æ—Ñ–µ-–±—Ä–µ–π–∫:** 1000-2000‚ÇΩ/—á–µ–ª\n"
            "**–§—É—Ä—à–µ—Ç:** 2000-4000‚ÇΩ/—á–µ–ª\n"
            "**–ë–∞–Ω–∫–µ—Ç:** 4000-8000‚ÇΩ/—á–µ–ª\n"
            "**VIP:** –æ—Ç 8000‚ÇΩ/—á–µ–ª\n\n"
            "–¢–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç:\n"
            "‚Ä¢ –í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é\n"
            "‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Å–ª—É–≥\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞!"
        )
    
    async def _handle_general_request(self, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.claude_service and self.claude_service.is_available():
            try:
                response = await self.claude_service.get_response(message)
                return response
            except:
                pass
        
        return (
            "üëã –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!\n\n"
            "–ß—Ç–æ —è –º–æ–≥—É:\n"
            "‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–º–µ—Ç—É –¥–ª—è –≤–∞—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è\n"
            "‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!"
        )


class SuperAIAgent:
    """üß† –°—É–ø–µ—Ä –ò–ò-–∞–≥–µ–Ω—Ç —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –ª–æ–≥–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, claude_service, menu_service, catering_rules):
        self.claude_service = claude_service
        self.menu_service = menu_service
        self.catering_rules = catering_rules
        self.excel_generator = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑–≤–Ω–µ
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç
        self._load_business_context()
        
        logger.info("üéâ SuperAIAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    
    def _load_business_context(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞ –†–µ—Å—Ç–î–µ–ª–∏–≤–µ—Ä–∏"""
        self.business_context = {
            'company_name': '–†–µ—Å—Ç–î–µ–ª–∏–≤–µ—Ä–∏',
            'services': ['—Ñ—É—Ä—à–µ—Ç', '–±–∞–Ω–∫–µ—Ç', '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', '–∫–æ—Ñ–µ-–±—Ä–µ–π–∫'],
            'min_order': 10000,
            'delivery_area': '–ú–æ—Å–∫–≤–∞ –∏ –æ–±–ª–∞—Å—Ç—å',
            'working_hours': '9:00-21:00',
            'order_deadline': '–∑–∞ —Å—É—Ç–∫–∏ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
            'special_features': [
                '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –æ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞',
                '–ö—Ä–∞—Å–∏–≤–∞—è –ø–æ–¥–∞—á–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ',
                '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
                '–ì–∏–±–∫–∏–µ —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã'
            ]
        }
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        self.service_standards = {
            '–∫–æ—Ñ–µ-–±—Ä–µ–π–∫': {
                'duration': '30-90 –º–∏–Ω',
                'weight_per_person': '150-300–≥',
                'price_range': '1000-2000‚ÇΩ',
                'staff_ratio': 30  # 1 –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –Ω–∞ 30 —á–µ–ª–æ–≤–µ–∫
            },
            '—Ñ—É—Ä—à–µ—Ç': {
                'duration': '2-4 —á–∞—Å–∞',
                'weight_per_person': '200-500–≥',
                'price_range': '2000-4000‚ÇΩ',
                'staff_ratio': 20
            },
            '–±–∞–Ω–∫–µ—Ç': {
                'duration': '3-6 —á–∞—Å–æ–≤',
                'weight_per_person': '600-1700–≥',
                'price_range': '4000-8000‚ÇΩ',
                'staff_ratio': 10
            },
            '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤': {
                'duration': '3-5 —á–∞—Å–æ–≤',
                'weight_per_person': '300-800–≥',
                'price_range': '2500-5000‚ÇΩ',
                'staff_ratio': 15
            }
        }
    
    async def process_super_request(self, message: str, user_info: Dict[str, Any]) -> str:
        """üöÄ –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            logger.info(f"üß† SuperAI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {message[:50]}...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            event_params = self._extract_event_params(message)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            intent = self._detect_intent(message)
            
            logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {event_params}")
            logger.info(f"üéØ –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {intent}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            if intent == "create_estimate":
                return await self._create_smart_estimate(event_params, user_info)
            elif intent == "menu_consultation":
                return await self._provide_menu_consultation(event_params)
            elif intent == "price_calculation":
                return await self._calculate_pricing(event_params)
            elif intent == "service_info":
                return await self._provide_service_info(message)
            elif intent == "order_status":
                return await self._check_order_status(message, user_info)
            else:
                return await self._handle_general_inquiry(message, user_info)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SuperAI: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return self._get_error_response()
    
    def _extract_event_params(self, message: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        params = {
            'guest_count': None,
            'event_type': None,
            'budget': None,
            'budget_per_person': None,
            'date': None,
            'duration': None,
            'special_requests': []
        }
        
        message_lower = message.lower()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π
        guest_patterns = [
            r'(\d+)\s*(?:—á–µ–ª–æ–≤–µ–∫|–ø–µ—Ä—Å–æ–Ω|–≥–æ—Å—Ç–µ–π|—á–µ–ª\.?)',
            r'–Ω–∞\s*(\d+)\s*(?:—á–µ–ª–æ–≤–µ–∫|–ø–µ—Ä—Å–æ–Ω|–≥–æ—Å—Ç–µ–π)',
            r'(?:—á–µ–ª–æ–≤–µ–∫|–ø–µ—Ä—Å–æ–Ω|–≥–æ—Å—Ç–µ–π)[:.\s]*(\d+)'
        ]
        
        for pattern in guest_patterns:
            match = re.search(pattern, message_lower)
            if match:
                params['guest_count'] = int(match.group(1))
                break
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event_types = {
            '—Ñ—É—Ä—à–µ—Ç': ['—Ñ—É—Ä—à–µ—Ç', '—Ñ—É—Ä—à–µ—Ç–Ω', '—Å—Ç–æ—è—á–∏–π'],
            '–±–∞–Ω–∫–µ—Ç': ['–±–∞–Ω–∫–µ—Ç', '–±–∞–Ω–∫–µ—Ç–Ω', '—Ä–∞—Å—Å–∞–¥–∫', '—Å–∏–¥—è—á–∏–π'],
            '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤': ['–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω', '–∫–æ–º–ø–∞–Ω–∏', '–æ—Ñ–∏—Å'],
            '–∫–æ—Ñ–µ-–±—Ä–µ–π–∫': ['–∫–æ—Ñ–µ', '–±—Ä–µ–π–∫', '–∫–æ—Ñ–µ–±—Ä–µ–π–∫', '–ø–µ—Ä–µ—Ä—ã–≤'],
            '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è': ['–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏', 'presentat'],
            '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è': ['–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–¥—Ä ', 'birthday'],
            '—Å–≤–∞–¥—å–±–∞': ['—Å–≤–∞–¥—å–±', '—Å–≤–∞–¥–µ–±']
        }
        
        for event_type, keywords in event_types.items():
            if any(keyword in message_lower for keyword in keywords):
                params['event_type'] = event_type
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—é–¥–∂–µ—Ç
        budget_patterns = [
            r'–±—é–¥–∂–µ—Ç[:\s]*(\d+)\s*(?:—Ç—ã—Å|–∫|—Ç—ã—Å—è—á|000)',
            r'(\d+)\s*(?:—Ç—ã—Å|–∫|—Ç—ã—Å—è—á)\s*(?:—Ä—É–±–ª–µ–π|—Ä—É–±|‚ÇΩ)?',
            r'–¥–æ\s*(\d+)\s*(?:—Ç—ã—Å|–∫|—Ç—ã—Å—è—á|000)',
            r'(\d+)\s*000\s*(?:—Ä—É–±–ª–µ–π|—Ä—É–±|‚ÇΩ)'
        ]
        
        for pattern in budget_patterns:
            match = re.search(pattern, message_lower)
            if match:
                budget_value = int(match.group(1))
                if budget_value < 1000:  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 1000, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ç—ã—Å—è—á–∏
                    params['budget'] = budget_value * 1000
                else:
                    params['budget'] = budget_value
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞
                if params['guest_count'] and params['budget']:
                    params['budget_per_person'] = params['budget'] / params['guest_count']
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
        date_patterns = [
            r'(\d{1,2})[./](\d{1,2})[./](\d{2,4})',
            r'(\d{1,2})\s*(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)',
            r'(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|—á–µ—Ä–µ–∑\s*\d+\s*–¥–Ω)',
            r'(–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü–∞|—Å—É–±–±–æ—Ç–∞|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)'
        ]
        
        for pattern in date_patterns:
            match = re.search(pattern, message_lower)
            if match:
                params['date'] = match.group(0)
                break
        
        # –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
        special_keywords = {
            '–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ': '–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ –º–µ–Ω—é',
            '–ø–æ—Å—Ç–Ω–æ–µ': '–ø–æ—Å—Ç–Ω–æ–µ –º–µ–Ω—é',
            '–¥–µ—Ç—Å–∫–æ–µ': '–¥–µ—Ç—Å–∫–æ–µ –º–µ–Ω—é',
            '—Ö–∞–ª—è–ª—å': '—Ö–∞–ª—è–ª—å–Ω–æ–µ –º–µ–Ω—é',
            '–∫–æ—à–µ—Ä–Ω–æ–µ': '–∫–æ—à–µ—Ä–Ω–æ–µ –º–µ–Ω—é',
            '–±–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤–æ–µ': '–±–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤–æ–µ –º–µ–Ω—é',
            '–¥–∏–µ—Ç–∏—á–µ—Å–∫–æ–µ': '–¥–∏–µ—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é'
        }
        
        for keyword, request in special_keywords.items():
            if keyword in message_lower:
                params['special_requests'].append(request)
        
        return params
    
    def _detect_intent(self, message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message_lower = message.lower()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        intents = {
            'create_estimate': [
                '—Å–º–µ—Ç', '—Ä–∞—Å—á–µ—Ç', '—Ä–∞—Å—Å—á–∏—Ç', '–ø–æ—Å—á–∏—Ç', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
                '—á–µ–ª–æ–≤–µ–∫', '–ø–µ—Ä—Å–æ–Ω', '–≥–æ—Å—Ç–µ–π', '—É—á–∞—Å—Ç–Ω–∏–∫'
            ],
            'menu_consultation': [
                '–º–µ–Ω—é', '–±–ª—é–¥–∞', '—á—Ç–æ –≤—Ö–æ–¥–∏—Ç', '—Å–æ—Å—Ç–∞–≤', '–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç',
                '—á—Ç–æ –µ—Å—Ç—å', '–≤–∞—Ä–∏–∞–Ω—Ç—ã', '–≤—ã–±–æ—Ä'
            ],
            'price_calculation': [
                '—Ü–µ–Ω', '—Å—Ç–æ–∏–º–æ—Å—Ç', '—Å—Ç–æ–∏—Ç', '–ø—Ä–∞–π—Å', '—Ç–∞—Ä–∏—Ñ',
                '—Å–∫–æ–ª—å–∫–æ', '–±—é–¥–∂–µ—Ç', '–¥–æ—Ä–æ–≥–æ', '–¥–µ—à–µ–≤–æ'
            ],
            'service_info': [
                '—É—Å–ª—É–≥', '—Å–µ—Ä–≤–∏—Å', '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω', '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç', '–ø–æ–≤–∞—Ä',
                '–¥–æ—Å—Ç–∞–≤–∫', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω', '–ø–æ—Å—É–¥'
            ],
            'order_status': [
                '—Å—Ç–∞—Ç—É—Å', '–∑–∞–∫–∞–∑', '–≥–¥–µ –º–æ–π', '–∫–æ–≥–¥–∞ –ø—Ä–∏–µ–¥–µ—Ç',
                '–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω', '–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å'
            ]
        }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        intent_scores = {}
        for intent, keywords in intents.items():
            score = sum(1 for keyword in keywords if keyword in message_lower)
            if score > 0:
                intent_scores[intent] = score
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º
        if intent_scores:
            return max(intent_scores, key=intent_scores.get)
        
        return 'general'
    
    async def _create_smart_estimate(self, params: Dict[str, Any], user_info: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–º–µ—Ç—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if not params['guest_count']:
                return self._request_missing_params(params)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if not params['event_type']:
                params['event_type'] = self._guess_event_type(params)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Claude –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.claude_service and self.claude_service.is_available():
                claude_params = await self.claude_service.analyze_request(
                    f"{params['event_type']} {params['guest_count']} —á–µ–ª–æ–≤–µ–∫"
                    + (f" –±—é–¥–∂–µ—Ç {params['budget']}" if params['budget'] else "")
                )
                if claude_params and claude_params.get('success'):
                    params.update(claude_params.get('data', {}))
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–ª—é–¥–∞
            menu_items = self.menu_service.get_items_for_event_type(
                params['event_type'],
                params['guest_count'],
                params['budget_per_person']
            )
            
            if not menu_items:
                return self._no_menu_items_response(params)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—Ç—É
            estimate = self.catering_rules.calculate_estimate(
                menu_items,
                params['guest_count'],
                params['event_type'],
                params['budget']
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
            excel_path = None
            if self.excel_generator:
                try:
                    excel_path = self.excel_generator.create_estimate(estimate, params)
                    logger.info(f"üìä Excel —Å–æ–∑–¥–∞–Ω: {excel_path}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self._format_smart_estimate_response(estimate, params, user_info)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω
            if excel_path:
                response += f"\n\nüìä **Excel —Ñ–∞–π–ª –≥–æ—Ç–æ–≤!** –§–∞–π–ª: `{excel_path}`"
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã: {e}")
            return self._get_error_response()
    
    def _guess_event_type(self, params: Dict[str, Any]) -> str:
        """–£–≥–∞–¥—ã–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        guest_count = params.get('guest_count', 50)
        budget_per_person = params.get('budget_per_person', 3000)
        
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if guest_count <= 30 and budget_per_person <= 2000:
            return '–∫–æ—Ñ–µ-–±—Ä–µ–π–∫'
        elif budget_per_person >= 5000:
            return '–±–∞–Ω–∫–µ—Ç'
        elif guest_count >= 50:
            return '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤'
        else:
            return '—Ñ—É—Ä—à–µ—Ç'
    
    def _request_missing_params(self, params: Dict[str, Any]) -> str:
        """–ó–∞–ø—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        missing = []
        
        if not params['guest_count']:
            missing.append("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π")
        if not params['event_type']:
            missing.append("—Ñ–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        
        return (
            f"ü§î –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–µ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å:\n\n"
            f"‚Ä¢ {', '.join(missing).capitalize()}\n\n"
            f"–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: `–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤ 50 —á–µ–ª–æ–≤–µ–∫ –±—é–¥–∂–µ—Ç 150000`\n\n"
            f"–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π, –∞ —è –ø–æ–¥–±–µ—Ä—É –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!"
        )
    
    def _no_menu_items_response(self, params: Dict[str, Any]) -> str:
        """–û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª—é–¥"""
        return (
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–µ–Ω—é –¥–ª—è –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:\n\n"
            f"‚Ä¢ –ì–æ—Å—Ç–µ–π: {params['guest_count']}\n"
            f"‚Ä¢ –§–æ—Ä–º–∞—Ç: {params['event_type']}\n"
            + (f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {params['budget']:,}‚ÇΩ\n" if params['budget'] else "") +
            f"\nü§ù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            f"‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –±—é–¥–∂–µ—Ç –¥–æ {params['guest_count'] * 2000:,}‚ÇΩ\n"
            f"‚Ä¢ –ò–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π\n"
            f"‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏ —è —Å–¥–µ–ª–∞—é —Ä–∞—Å—á–µ—Ç!"
        )
    
    def _format_smart_estimate_response(self, estimate: Dict[str, Any], params: Dict[str, Any], user_info: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ —Å–º–µ—Ç–æ–π"""
        event_type = params.get('event_type', '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ').title()
        guest_count = params['guest_count']
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        greeting = f"–û—Ç–ª–∏—á–Ω–æ, {user_info.get('first_name', '–ú–µ–Ω–µ–¥–∂–µ—Ä')}!"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        menu_cost = estimate.get('menu_cost', 0)
        service_cost = estimate.get('service_cost', 0)
        total_cost = estimate.get('total_cost', 0)
        cost_per_guest = estimate.get('cost_per_guest', 0)
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –±—é–¥–∂–µ—Ç—É
        budget_analysis = ""
        if params.get('budget'):
            if total_cost <= params['budget']:
                budget_analysis = f"‚úÖ –£–∫–ª–∞–¥—ã–≤–∞–µ–º—Å—è –≤ –±—é–¥–∂–µ—Ç {params['budget']:,}‚ÇΩ"
            else:
                over_budget = total_cost - params['budget']
                budget_analysis = f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ {over_budget:,}‚ÇΩ"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._get_smart_recommendations(estimate, params)
        
        response = f"""
{greeting} –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è –≤–∞—Å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:

üéØ **{event_type} –Ω–∞ {guest_count} —á–µ–ª–æ–≤–µ–∫**

üìä **–†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò:**
‚Ä¢ üçΩÔ∏è –ú–µ–Ω—é: **{menu_cost:,.0f}‚ÇΩ**
‚Ä¢ üë• –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: **{service_cost:,.0f}‚ÇΩ**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ **–ò–¢–û–ì–û: {total_cost:,.0f}‚ÇΩ**
üë§ –ù–∞ —á–µ–ª–æ–≤–µ–∫–∞: **{cost_per_guest:,.0f}‚ÇΩ**

{budget_analysis}

üìã **–ß–¢–û –í–ö–õ–Æ–ß–ï–ù–û:**
‚Ä¢ {estimate.get('menu_items_count', 0)} –ø–æ–∑–∏—Ü–∏–π –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
‚Ä¢ –ì—Ä–∞–º–º–æ–≤–∫–∞ {estimate.get('weight_per_person', 0):.0f}–≥ –Ω–∞ –≥–æ—Å—Ç—è
‚Ä¢ –ö—Ä–∞—Å–∏–≤–∞—è –ø–æ–¥–∞—á–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î

{recommendations}

üìû –ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑? –û—Ç–ø—Ä–∞–≤—å—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é" –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã!
"""
        
        return response
    
    def _get_smart_recommendations(self, estimate: Dict[str, Any], params: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞–º–º–æ–≤–∫—É
        weight_per_guest = estimate.get('weight_per_person', 0)
        event_type = params.get('event_type', '—Ñ—É—Ä—à–µ—Ç')
        standards = self.service_standards.get(event_type, {})
        
        if weight_per_guest < 200:
            recommendations.append("üìå –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥ –¥–ª—è —Å—ã—Ç–æ—Å—Ç–∏ –≥–æ—Å—Ç–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª
        if estimate.get('service_cost', 0) == 0:
            recommendations.append("üìå –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–∞ –≥–æ—Å—Ç–µ–π")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if params.get('guest_count', 0) >= 50:
            recommendations.append("üéÅ –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 50 —á–µ–ª–æ–≤–µ–∫ - –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç —à–µ—Ñ–∞!")
        
        if recommendations:
            return "\nüí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n" + "\n".join(recommendations)
        else:
            return "\n‚ú® **–≠—Ç–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!**"
    
    async def _provide_menu_consultation(self, params: Dict[str, Any]) -> str:
        """–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º–µ–Ω—é"""
        menu_stats = self.menu_service.get_menu_stats()
        
        response = f"""
üìã **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º–µ–Ω—é –†–µ—Å—Ç–î–µ–ª–∏–≤–µ—Ä–∏**

–£ –Ω–∞—Å {menu_stats['total_items']} –ø–æ–∑–∏—Ü–∏–π –≤ {menu_stats['categories']} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö!

üåü **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {params.get('event_type', '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')}:**

**–ö–∞–Ω–∞–ø–µ –∏ –±—Ä—É—Å–∫–µ—Ç—Ç—ã:**
‚Ä¢ –ö–∞–Ω–∞–ø–µ —Å –ª–æ—Å–æ—Å–µ–º –∏ —Å–ª–∏–≤–æ—á–Ω—ã–º —Å—ã—Ä–æ–º
‚Ä¢ –ë—Ä—É—Å–∫–µ—Ç—Ç–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏ –∏ –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π
‚Ä¢ –ö–∞–Ω–∞–ø–µ —Å —Ä–æ—Å—Ç–±–∏—Ñ–æ–º –∏ —Ç—Ä—é—Ñ–µ–ª—å–Ω—ã–º —Å–æ—É—Å–æ–º

**–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏:**
‚Ä¢ –ú–∏–Ω–∏-—à–∞—à–ª—ã—á–∫–∏ –∏–∑ –∫—É—Ä–∏—Ü—ã
‚Ä¢ –ñ—É–ª—å–µ–Ω –≤ —Ç–∞—Ä—Ç–∞–ª–µ—Ç–∫–∞—Ö
‚Ä¢ –¢–µ–º–ø—É—Ä–∞ –∏–∑ –∫—Ä–µ–≤–µ—Ç–æ–∫

**–î–µ—Å–µ—Ä—Ç—ã:**
‚Ä¢ –ú–∏–Ω–∏-—á–∏–∑–∫–µ–π–∫–∏
‚Ä¢ –ú–∞–∫–∞—Ä–æ–Ω—Å –∞—Å—Å–æ—Ä—Ç–∏
‚Ä¢ –§—Ä—É–∫—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ø–µ

üí° **–ö–∞–∫ –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–µ–Ω—é:**
1. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
2. –°–æ–±–ª—é–¥–∞–π—Ç–µ –±–∞–ª–∞–Ω—Å –º—è—Å–Ω—ã—Ö/—Ä—ã–±–Ω—ã—Ö/–æ–≤–æ—â–Ω—ã—Ö –±–ª—é–¥
3. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –¥–µ—Å–µ—Ä—Ç—ã (15-20% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)

–•–æ—Ç–∏—Ç–µ, —è —Å–æ—Å—Ç–∞–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è?
"""
        
        return response
    
    async def _calculate_pricing(self, params: Dict[str, Any]) -> str:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        event_type = params.get('event_type', '—Ñ—É—Ä—à–µ—Ç')
        guest_count = params.get('guest_count', 50)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–ª—è —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        standards = self.service_standards.get(event_type, self.service_standards['—Ñ—É—Ä—à–µ—Ç'])
        
        # –†–∞—Å—á–µ—Ç—ã
        min_price = guest_count * int(standards['price_range'].split('-')[0].replace('‚ÇΩ', ''))
        max_price = guest_count * int(standards['price_range'].split('-')[1].replace('‚ÇΩ', ''))
        
        response = f"""
üí∞ **–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏**

üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:
‚Ä¢ –§–æ—Ä–º–∞—Ç: **{event_type.title()}**
‚Ä¢ –ì–æ—Å—Ç–µ–π: **{guest_count}**
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: **{standards['duration']}**

üíµ **–°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:**
‚Ä¢ –≠–∫–æ–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç: **{min_price:,}‚ÇΩ**
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π: **{(min_price + max_price) // 2:,}‚ÇΩ**
‚Ä¢ –ü—Ä–µ–º–∏—É–º: **{max_price:,}‚ÇΩ**

üìã **–ß—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ü–µ–Ω—É:**
‚Ä¢ –í—ã–±–æ—Ä –±–ª—é–¥ (30-50% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (20-30%)
‚Ä¢ –ê—Ä–µ–Ω–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (10-20%)
‚Ä¢ –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ —É–ø–∞–∫–æ–≤–∫–∞ (5-10%)

üéØ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:**
–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç {(min_price + max_price) // 2:,}‚ÇΩ –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ {12 + guest_count // 10} –ø–æ–∑–∏—Ü–∏–π –º–µ–Ω—é
‚Ä¢ –ì—Ä–∞–º–º–æ–≤–∫–∞ {standards['weight_per_person']}
‚Ä¢ {guest_count // standards['staff_ratio']} –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
‚Ä¢ –ö—Ä–∞—Å–∏–≤–∞—è –ø–æ–¥–∞—á–∞

–•–æ—Ç–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç? –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è!
"""
        
        return response
    
    async def _provide_service_info(self, message: str) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–∞—Ö"""
        return f"""
üéØ **–£—Å–ª—É–≥–∏ –†–µ—Å—Ç–î–µ–ª–∏–≤–µ—Ä–∏**

üöö **–î–æ—Å—Ç–∞–≤–∫–∞:**
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î
‚Ä¢ –ó–∞ –ú–ö–ê–î - –æ—Ç 1500‚ÇΩ
‚Ä¢ –¢–æ—á–Ω–æ –∫–æ –≤—Ä–µ–º–µ–Ω–∏

üë• **–ü–µ—Ä—Å–æ–Ω–∞–ª:**
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã
‚Ä¢ –í—ã–µ–∑–¥–Ω—ã–µ –ø–æ–≤–∞—Ä–∞
‚Ä¢ –ë–∞–Ω–∫–µ—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
‚Ä¢ –£–Ω–∏—Ñ–æ—Ä–º–∞ –∏ –ø–æ–ª–Ω–∞—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞

ü™ë **–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ –§—É—Ä—à–µ—Ç–Ω—ã–µ —Å—Ç–æ–ª—ã
‚Ä¢ –ö–æ–∫—Ç–µ–π–ª—å–Ω—ã–µ —Å—Ç–æ–ª—ã
‚Ä¢ –ë–∞–Ω–∫–µ—Ç–Ω—ã–µ —Å—Ç–æ–ª—ã –∏ —Å—Ç—É–ª—å—è
‚Ä¢ –¢–µ–∫—Å—Ç–∏–ª—å –∏ –¥–µ–∫–æ—Ä

üçΩÔ∏è **–ü–æ—Å—É–¥–∞:**
‚Ä¢ –§–∞—Ä—Ñ–æ—Ä–æ–≤–∞—è –ø–æ—Å—É–¥–∞
‚Ä¢ –°—Ç–µ–∫–ª—è–Ω–Ω—ã–µ –±–æ–∫–∞–ª—ã
‚Ä¢ –°—Ç–æ–ª–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã
‚Ä¢ –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞ (—ç–∫–æ)

‚è∞ **–£—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞:**
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 10,000‚ÇΩ
‚Ä¢ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –∑–∞ 24 —á–∞—Å–∞
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è: –∑–∞ 48 —á–∞—Å–æ–≤
‚Ä¢ –û–ø–ª–∞—Ç–∞: –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%

üìû –ù—É–∂–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —É—Å–ª—É–≥–∞? –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ!
"""
    
    async def _check_order_status(self, message: str, user_info: Dict[str, Any]) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–∫–∞–∑–æ–≤
        return f"""
üì¶ **–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞**

–£–≤–∞–∂–∞–µ–º—ã–π {user_info.get('first_name', '–∫–ª–∏–µ–Ω—Ç')}!

–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –º–Ω–µ –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.
–ù–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ (—Ñ–æ—Ä–º–∞—Ç: RD-XXXXXX).

–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞, —è –º–æ–≥—É –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ:
‚Ä¢ –î–∞—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
‚Ä¢ –í–∞—à–µ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É
‚Ä¢ –ê–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏

–£–∫–∞–∂–∏—Ç–µ –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞!
"""
    
    async def _handle_general_inquiry(self, message: str, user_info: Dict[str, Any]) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Claude –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.claude_service and self.claude_service.is_available():
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–ø–∞–Ω–∏–∏
                context_message = f"""
                –¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –†–µ—Å—Ç–î–µ–ª–∏–≤–µ—Ä–∏, –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –±–∞–Ω–∫–µ—Ç–Ω—ã—Ö –±–ª—é–¥.
                –ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {message}
                
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏:
                - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 10,000‚ÇΩ
                - –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–æ—Å–∫–≤–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
                - –ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞ —Å—É—Ç–∫–∏
                - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Ñ—É—Ä—à–µ—Ç—ã, –±–∞–Ω–∫–µ—Ç—ã, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã
                
                –î–∞–π –ø–æ–ª–µ–∑–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç.
                """
                
                response = await self.claude_service.get_response(context_message)
                return response
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Claude: {e}")
        
        # –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        return f"""
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_info.get('first_name', '–¥–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç')}!

–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ **–†–µ—Å—Ç–î–µ–ª–∏–≤–µ—Ä–∏**.

üéØ **–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å:**
‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–º–µ—Ç—É –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —É—Å–ª—É–≥–∞–º
‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ—Å—Ç–∞–≤–∫–µ

üí° **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ!

–ù–∞–ø—Ä–∏–º–µ—Ä: "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤ –Ω–∞ 50 —á–µ–ª–æ–≤–µ–∫" –∏–ª–∏ "–§—É—Ä—à–µ—Ç –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"

üìû –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!
"""
    
    def _get_error_response(self) -> str:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return (
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å\n"
            "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π, —Ñ–æ—Ä–º–∞—Ç)\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∑–∂–µ\n\n"
            "–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º: +7 (495) XXX-XX-XX"
        )


def create_intelligent_assistant(claude_service, menu_service, catering_rules) -> Optional[IntelligentAssistant]:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è IntelligentAssistant"""
    try:
        assistant = IntelligentAssistant(claude_service, menu_service, catering_rules)
        logger.info("‚úÖ IntelligentAssistant —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return assistant
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è IntelligentAssistant: {e}")
        return None


def create_super_ai_agent(claude_service, menu_service, catering_rules) -> Optional[SuperAIAgent]:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SuperAIAgent"""
    try:
        agent = SuperAIAgent(claude_service, menu_service, catering_rules)
        logger.info("üéâ SuperAIAgent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return agent
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SuperAIAgent: {e}")
        return None


# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
def test_super_ai_agent():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SuperAIAgent"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SuperAIAgent...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-—Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    class MockService:
        def is_available(self):
            return True
        
        def get_menu_stats(self):
            return {'total_items': 100, 'categories': 10}
        
        def get_items_for_event_type(self, *args):
            return [{'name': '–¢–µ—Å—Ç', 'price': 100}] * 10
        
        def calculate_estimate(self, *args):
            return {
                'menu_cost': 50000,
                'service_cost': 10000,
                'total_cost': 60000,
                'cost_per_guest': 1200,
                'weight_per_person': 350,
                'menu_items_count': 10
            }
    
    mock_service = MockService()
    agent = create_super_ai_agent(mock_service, mock_service, mock_service)
    
    if agent:
        logger.info("‚úÖ SuperAIAgent —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        test_messages = [
            "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤ 50 —á–µ–ª–æ–≤–µ–∫ –±—é–¥–∂–µ—Ç 150–∫",
            "–§—É—Ä—à–µ—Ç –Ω–∞ 30 –ø–µ—Ä—Å–æ–Ω",
            "–ë–∞–Ω–∫–µ—Ç 100 –≥–æ—Å—Ç–µ–π –Ω–∞ 5 –º–∞—Ä—Ç–∞"
        ]
        
        for msg in test_messages:
            params = agent._extract_event_params(msg)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {msg}")
            logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SuperAIAgent –¥–ª—è —Ç–µ—Å—Ç–∞")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
    test_super_ai_agent()