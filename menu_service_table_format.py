#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Menu Service - –ê–î–ê–ü–¢–ò–†–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ txt —Ñ–∞–π–ª–æ–≤
–§–æ—Ä–º–∞—Ç: –ê—Ä—Ç–∏–∫—É–ª	–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ	–û–ø–∏—Å–∞–Ω–∏–µ	–í–µ—Å (–≥)	–¶–µ–Ω–∞ (‚ÇΩ)
"""

import json
import logging
from pathlib import Path
from typing import List, Dict, Any, Optional
import re

logger = logging.getLogger(__name__)


class MenuService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é - –í–ï–†–°–ò–Ø –î–õ–Ø –¢–ê–ë–õ–ò–ß–ù–û–ì–û –§–û–†–ú–ê–¢–ê"""
    
    def __init__(self, menu_files_dir: str = "menu_files"):
        self.menu_files_dir = Path(menu_files_dir)
        self.menu_items = []
        self.categories = {}
        self.txt_files = []
        
        # –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–±–æ—Ä–∞ –ø–æ —Ç–∏–ø–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        self.event_rules = {
            '–∫–æ—Ñ–µ-–±—Ä–µ–π–∫': {
                '–≥—Ä–∞–º–º–æ–≤–∫–∞': (200, 300),
                '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏': {
                    '–ö–∞–Ω–∞–ø–µ': 0.3,
                    '–°—ç–Ω–¥–≤–∏—á–∏': 0.3,
                    '–í—ã–ø–µ—á–∫–∞': 0.2,
                    '–î–µ—Å–µ—Ä—Ç—ã': 0.2
                },
                '–ø–æ–∑–∏—Ü–∏–π_–Ω–∞_—á–µ–ª–æ–≤–µ–∫–∞': 0.15,
                '–º–∏–Ω_–ø–æ–∑–∏—Ü–∏–π': 4,
                '–º–∞–∫—Å_–ø–æ–∑–∏—Ü–∏–π': 8
            },
            '—Ñ—É—Ä—à–µ—Ç': {
                '–≥—Ä–∞–º–º–æ–≤–∫–∞': (300, 500),
                '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏': {
                    '–ö–∞–Ω–∞–ø–µ': 0.25,
                    '–ë—Ä—É—Å–∫–µ—Ç—Ç—ã': 0.15,
                    '–°–∞–ª–∞—Ç—ã': 0.2,
                    '–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏': 0.15,
                    '–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏': 0.15,
                    '–î–µ—Å–µ—Ä—Ç—ã': 0.1
                },
                '–ø–æ–∑–∏—Ü–∏–π_–Ω–∞_—á–µ–ª–æ–≤–µ–∫–∞': 0.2,
                '–º–∏–Ω_–ø–æ–∑–∏—Ü–∏–π': 8,
                '–º–∞–∫—Å_–ø–æ–∑–∏—Ü–∏–π': 15
            },
            '–±–∞–Ω–∫–µ—Ç': {
                '–≥—Ä–∞–º–º–æ–≤–∫–∞': (700, 1200),
                '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏': {
                    '–°–∞–ª–∞—Ç—ã': 0.2,
                    '–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏': 0.15,
                    '–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏': 0.2,
                    '–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞': 0.25,
                    '–ì–∞—Ä–Ω–∏—Ä—ã': 0.1,
                    '–î–µ—Å–µ—Ä—Ç—ã': 0.1
                },
                '–ø–æ–∑–∏—Ü–∏–π_–Ω–∞_—á–µ–ª–æ–≤–µ–∫–∞': 0.25,
                '–º–∏–Ω_–ø–æ–∑–∏—Ü–∏–π': 10,
                '–º–∞–∫—Å_–ø–æ–∑–∏—Ü–∏–π': 20
            },
            '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤': {
                '–≥—Ä–∞–º–º–æ–≤–∫–∞': (400, 700),
                '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏': {
                    '–ö–∞–Ω–∞–ø–µ': 0.2,
                    '–ë—Ä—É—Å–∫–µ—Ç—Ç—ã': 0.15,
                    '–°–∞–ª–∞—Ç—ã': 0.15,
                    '–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏': 0.2,
                    '–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏': 0.15,
                    '–î–µ—Å–µ—Ä—Ç—ã': 0.15
                },
                '–ø–æ–∑–∏—Ü–∏–π_–Ω–∞_—á–µ–ª–æ–≤–µ–∫–∞': 0.22,
                '–º–∏–Ω_–ø–æ–∑–∏—Ü–∏–π': 10,
                '–º–∞–∫—Å_–ø–æ–∑–∏—Ü–∏–π': 18
            }
        }
        
        self.load_menu_from_txt_files()
    
    def load_menu_from_txt_files(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é –∏–∑ txt —Ñ–∞–π–ª–æ–≤ —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
        try:
            logger.info(f"üîç –ü–æ–∏—Å–∫ txt —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {self.menu_files_dir}")
            logger.info(f"üìÅ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {self.menu_files_dir.absolute()}")
            
            if not self.menu_files_dir.exists():
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {self.menu_files_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                self._create_menu_files_directory()
                return
            
            # –ò—â–µ–º –≤—Å–µ txt —Ñ–∞–π–ª—ã
            txt_files = list(self.menu_files_dir.glob("*.txt"))
            
            logger.info(f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {self.menu_files_dir}:")
            for item in self.menu_files_dir.iterdir():
                logger.info(f"  - {item.name} ({'—Ñ–∞–π–ª' if item.is_file() else '–ø–∞–ø–∫–∞'})")
            
            if not txt_files:
                logger.warning(f"‚ö†Ô∏è Txt —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {self.menu_files_dir}")
                self._create_sample_txt_files()
                txt_files = list(self.menu_files_dir.glob("*.txt"))
            
            self.txt_files = txt_files
            logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ txt —Ñ–∞–π–ª–æ–≤: {len(txt_files)}")
            for txt_file in txt_files:
                logger.info(f"  - {txt_file.name}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
            total_items = 0
            for txt_file in txt_files:
                logger.info(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {txt_file.name}")
                items_count = self._load_menu_from_txt_file(txt_file)
                total_items += items_count
                logger.info(f"üìÑ {txt_file.name}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {items_count} –ø–æ–∑–∏—Ü–∏–π")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            self._categorize_items()
            
            # –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–õ–ê–î–û–ß–ù–£–Æ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ö–ê–¢–ï–ì–û–†–ò–Ø–•
            logger.info(f"üìÇ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            for category, items in self.categories.items():
                logger.info(f"  - {category}: {len(items)} –ø–æ–∑–∏—Ü–∏–π")
            
            logger.info(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_items} –ø–æ–∑–∏—Ü–∏–π –∏–∑ {len(txt_files)} —Ñ–∞–π–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ txt —Ñ–∞–π–ª–æ–≤: {e}")
            import traceback
            logger.error(traceback.format_exc())
            self._create_default_menu()
    
    def _load_menu_from_txt_file(self, txt_file: Path) -> int:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é –∏–∑ –æ–¥–Ω–æ–≥–æ txt —Ñ–∞–π–ª–∞ —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
        try:
            logger.info(f"üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: {txt_file}")
            with open(txt_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            if not lines:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {txt_file.name} –ø—É—Å—Ç–æ–π")
                return 0
            
            logger.info(f"üìÑ –í —Ñ–∞–π–ª–µ {txt_file.name} —Å—Ç—Ä–æ–∫: {len(lines)}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            category = self._determine_category_from_filename(txt_file.name)
            logger.info(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è {txt_file.name}: {category}")
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            items = self._parse_table_content(lines, category, txt_file.name)
            
            logger.info(f"‚úÖ –ò–∑ —Ñ–∞–π–ª–∞ {txt_file.name} –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(items)} –ø–æ–∑–∏—Ü–∏–π")
            for item in items[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"   - {item['article']}: {item['name']} ({item['price']}‚ÇΩ)")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
            self.menu_items.extend(items)
            
            return len(items)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {txt_file}: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return 0
    
    def _determine_category_from_filename(self, filename: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        filename_lower = filename.lower()
        
        category_mapping = {
            '–∫–∞–Ω–∞–ø–µ': '–ö–∞–Ω–∞–ø–µ',
            '–±—Ä—É—Å–∫–µ—Ç—Ç': '–ë—Ä—É—Å–∫–µ—Ç—Ç—ã',
            '—Å–∞–ª–∞—Ç': '–°–∞–ª–∞—Ç—ã',
            '–±–∞–Ω–∫–µ—Ç': '–ë–∞–Ω–∫–µ—Ç–Ω—ã–µ –±–ª—é–¥–∞',
            '–≥–æ—Ä—è—á–∏–µ': '–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏',
            '—Ö–æ–ª–æ–¥–Ω—ã–µ': '–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏',
            '–¥–µ—Å–µ—Ä—Ç': '–î–µ—Å–µ—Ä—Ç—ã',
            '—Å—ç–Ω–¥–≤–∏—á': '–°—ç–Ω–¥–≤–∏—á–∏',
            '–≤—ã–ø–µ—á–∫–∞': '–í—ã–ø–µ—á–∫–∞',
            '–Ω–∞–ø–∏—Ç–∫–∏': '–ù–∞–ø–∏—Ç–∫–∏',
            '–≥–∞—Ä–Ω–∏—Ä': '–ì–∞—Ä–Ω–∏—Ä—ã',
            '—Å–µ—Ç': '–ì–æ—Ç–æ–≤—ã–µ —Å–µ—Ç—ã',
            '–º–µ–Ω—é': '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é'
        }
        
        for keyword, category in category_mapping.items():
            if keyword in filename_lower:
                return category
        
        # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        return filename.replace('.txt', '').replace('_', ' ').title()
    
    def _parse_table_content(self, lines: List[str], category: str, filename: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        items = []
        
        logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ {filename}, —Å—Ç—Ä–æ–∫: {len(lines)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
        if lines and lines[0].strip():
            header = lines[0].strip()
            logger.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞ {filename}: {header}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if '\t' in header or '–ê—Ä—Ç–∏–∫—É–ª' in header:
                logger.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ {filename}")
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                data_lines = lines[1:]
            else:
                logger.warning(f"‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {filename}, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏")
                # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
                data_lines = lines
        else:
            data_lines = lines
        
        logger.info(f"üìÑ –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(data_lines)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        processed_count = 0
        for line_num, line in enumerate(data_lines, 2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ 1 - –∑–∞–≥–æ–ª–æ–≤–æ–∫
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            
            logger.debug(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É {line_num}: {line[:100]}...")
            
            try:
                item = self._parse_table_line(line, category, line_num, filename)
                if item:
                    items.append(item)
                    processed_count += 1
                    logger.debug(f"‚úÖ –°—Ç—Ä–æ–∫–∞ {line_num} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {item['name']}")
                else:
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {line_num} –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {line_num} –≤ {filename}: {e}")
                logger.warning(f"–°—Ç—Ä–æ–∫–∞: {line}")
        
        logger.info(f"‚úÖ –ò–∑ {filename} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {len(data_lines)} —Å—Ç—Ä–æ–∫")
        
        return items
    
    def _parse_table_line(self, line: str, category: str, line_num: int, filename: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–∞–±—É–ª—è—Ü–∏–∏
        parts = line.split('\t')
        
        logger.debug(f"üîç –°—Ç—Ä–æ–∫–∞ {line_num}: –Ω–∞–π–¥–µ–Ω–æ {len(parts)} –∫–æ–ª–æ–Ω–æ–∫")
        logger.debug(f"    –ö–æ–ª–æ–Ω–∫–∏: {[p[:30] + '...' if len(p) > 30 else p for p in parts]}")
        
        if len(parts) >= 5:
            # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –ê—Ä—Ç–∏–∫—É–ª	–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ	–û–ø–∏—Å–∞–Ω–∏–µ	–í–µ—Å (–≥)	–¶–µ–Ω–∞ (‚ÇΩ)
            try:
                article = parts[0].strip()
                name = parts[1].strip()
                description = parts[2].strip()
                weight_str = parts[3].strip()
                price_str = parts[4].strip()
                
                logger.debug(f"    –ê—Ä—Ç–∏–∫—É–ª: {article}")
                logger.debug(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
                logger.debug(f"    –í–µ—Å: {weight_str}")
                logger.debug(f"    –¶–µ–Ω–∞: {price_str}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                weight = self._extract_number(weight_str)
                price = self._extract_number(price_str)
                
                logger.debug(f"    –ò–∑–≤–ª–µ—á–µ–Ω–æ - –í–µ—Å: {weight}–≥, –¶–µ–Ω–∞: {price}‚ÇΩ")
                
                if not name:
                    logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}")
                    return None
                
                # –°–æ–∑–¥–∞–µ–º ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ç–∏–∫—É–ª–∞
                item_id = self._create_id_from_article(article, line_num)
                
                logger.debug(f"    –°–æ–∑–¥–∞–Ω ID: {item_id}")
                
                item = {
                    'id': item_id,
                    'article': article,
                    'name': name,
                    'description': description,
                    'category': category,
                    'price': max(1, price),
                    'weight': max(1, weight),
                    'unit': '—à—Ç',
                    'source_file': filename
                }
                
                logger.debug(f"    ‚úÖ –°–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç: {item['name']} (ID: {item['id']})")
                return item
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: {e}")
                logger.error(f"    –°—Ç—Ä–æ–∫–∞: {line}")
                return None
        
        elif len(parts) >= 3:
            # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            try:
                article = parts[0].strip()
                name = parts[1].strip()
                weight_str = parts[2].strip() if len(parts) > 2 else "100"
                price_str = parts[3].strip() if len(parts) > 3 else "500"
                
                weight = self._extract_number(weight_str)
                price = self._extract_number(price_str)
                
                item_id = self._create_id_from_article(article, line_num)
                
                logger.debug(f"    ‚úÖ –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {name} (ID: {item_id})")
                
                return {
                    'id': item_id,
                    'article': article,
                    'name': name,
                    'description': '',
                    'category': category,
                    'price': max(1, price),
                    'weight': max(1, weight),
                    'unit': '—à—Ç',
                    'source_file': filename
                }
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: {e}")
                return None
        
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: {len(parts)} –∫–æ–ª–æ–Ω–æ–∫ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3)")
            logger.warning(f"    –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {parts}")
            return None
    
    def _create_id_from_article(self, article: str, line_num: int) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ç–∏–∫—É–ª–∞"""
        if article:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å –∏–∑ –∞—Ä—Ç–∏–∫—É–ª–∞
            numbers = re.findall(r'\d+', article)
            if numbers:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ –∞—Ä—Ç–∏–∫—É–ª–∞
                base_id = int(numbers[0])
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                return base_id + (hash(article) % 1000)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —á–∏—Å–µ–ª –≤ –∞—Ä—Ç–∏–∫—É–ª–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞
                return abs(hash(article)) % 10000 + 1000
        else:
            # –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
            return line_num + 10000
    
    def _extract_number(self, text: str) -> int:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return 0
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        numbers = re.findall(r'\d+', text)
        if numbers:
            return int(numbers[0])
        return 0
    
    def _create_menu_files_directory(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ menu_files"""
        try:
            self.menu_files_dir.mkdir(exist_ok=True)
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {self.menu_files_dir}")
            self._create_sample_txt_files()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
    
    def _create_sample_txt_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ txt —Ñ–∞–π–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        sample_files = {
            '–±–∞–Ω–∫–µ—Ç–Ω–æ–µ_–º–µ–Ω—é.txt': """–ê—Ä—Ç–∏–∫—É–ª	–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ	–û–ø–∏—Å–∞–Ω–∏–µ	–í–µ—Å (–≥)	–¶–µ–Ω–∞ (‚ÇΩ)
B001	–ì–æ–≤—è–∂–∏–π –±–æ–∫ –Ω–∞ –ø–æ–¥—É—à–∫–µ –∏–∑ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ-—Ç—ã–∫–≤–µ–Ω–Ω–æ–≥–æ –ø—é—Ä–µ	–ù–µ–∂–Ω–∞—è –≥–æ–≤—è–¥–∏–Ω–∞ –Ω–∞ –≤–æ–∑–¥—É—à–Ω–æ–º –ø—é—Ä–µ –∏–∑ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è –∏ —Ç—ã–∫–≤—ã	250	1150
B002	–ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Å–∫—É–º–±—Ä–∏—è —Å –±–∞–∫–ª–∞–∂–∞–Ω–∞–º–∏ –∏ –∫—É–Ω–∂—É—Ç–Ω—ã–º —Å–æ—É—Å–æ–º	–ê—Ä–æ–º–∞—Ç–Ω–∞—è —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏ –ø–æ–¥ –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–º –∞–∑–∏–∞—Ç—Å–∫–∏–º —Å–æ—É—Å–æ–º	270	1100
B003	–ú–µ–¥–∞–ª—å–æ–Ω—ã –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã —Å —Å–µ–∑–æ–Ω–Ω—ã–º–∏ –≥—Ä–∏–±–∞–º–∏	–°–æ—á–Ω—ã–µ –º–µ–¥–∞–ª—å–æ–Ω—ã –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω—ã —Å –ª–µ—Å–Ω—ã–º–∏ –≥—Ä–∏–±–∞–º–∏	250	1350
B004	–†–∞–¥—É–∂–Ω–∞—è —Ñ–æ—Ä–µ–ª—å —Å –ø—é—Ä–µ –≤–∞—Å–∞–±–∏, –±–∏—Å–∫, —Ç–∞—Ä—Ç–∞—Ä –∏–∑ –æ–≥—É—Ä—Ü–æ–≤	–î–µ–ª–∏–∫–∞—Ç–µ—Å–Ω–∞—è —Ñ–æ—Ä–µ–ª—å —Å —è–ø–æ–Ω—Å–∫–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ –∏ —Å–≤–µ–∂–∏–º —Ç–∞—Ä—Ç–∞—Ä–æ–º	260	1600
B005	–¢–µ–ª—è—á—å–∏ —â–µ—á–∫–∏ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ-—Å–µ–ª—å–¥–µ—Ä–µ–µ–≤—ã–º –∫—Ä–µ–º–æ–º –∏ –≥—Ä–∏–±–Ω—ã–º —Å–æ—É—Å–æ–º	–¢–æ–º–ª–µ–Ω—ã–µ —â–µ—á–∫–∏ –º–æ–ª–æ–¥–æ–π —Ç–µ–ª—è—Ç–∏–Ω—ã –≤ –∞—Ä–æ–º–∞—Ç–Ω–æ–º –≥—Ä–∏–±–Ω–æ–º —Å–æ—É—Å–µ	250	1200""",
            
            '–∫–∞–Ω–∞–ø–µ_–º–µ–Ω—é.txt': """–ê—Ä—Ç–∏–∫—É–ª	–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ	–û–ø–∏—Å–∞–Ω–∏–µ	–í–µ—Å (–≥)	–¶–µ–Ω–∞ (‚ÇΩ)
K001	–ö–∞–Ω–∞–ø–µ —Å –ª–æ—Å–æ—Å–µ–º –∏ —Å–ª–∏–≤–æ—á–Ω—ã–º —Å—ã—Ä–æ–º	–ò–∑—ã—Å–∫–∞–Ω–Ω–æ–µ –∫–∞–Ω–∞–ø–µ —Å –∫–æ–ø—á–µ–Ω—ã–º –ª–æ—Å–æ—Å–µ–º –Ω–∞ —Ä–∂–∞–Ω–æ–º —Ö–ª–µ–±–µ	30	180
K002	–ö–∞–Ω–∞–ø–µ —Å —Ä–æ—Å—Ç–±–∏—Ñ–æ–º –∏ —Ç—Ä—é—Ñ–µ–ª—å–Ω—ã–º —Å–æ—É—Å–æ–º	–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç–±–∏—Ñ —Å –∞—Ä–æ–º–∞—Ç–Ω—ã–º —Ç—Ä—é—Ñ–µ–ª—å–Ω—ã–º —Å–æ—É—Å–æ–º	35	200
K003	–ö–∞–Ω–∞–ø–µ —Å —Å—ã—Ä–æ–º –∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–æ–º	–ù–µ–∂–Ω—ã–π —Å—ã—Ä –±—Ä–∏ —Å —Å–æ—á–Ω—ã–º –≤–∏–Ω–æ–≥—Ä–∞–¥–æ–º –Ω–∞ —Ç–æ—Å—Ç–µ	25	150
K004	–ö–∞–Ω–∞–ø–µ —Å –∫—Ä–µ–≤–µ—Ç–∫–æ–π –∏ –∞–≤–æ–∫–∞–¥–æ	–¢–∏–≥—Ä–æ–≤–∞—è –∫—Ä–µ–≤–µ—Ç–∫–∞ —Å –∫—Ä–µ–º–æ–≤—ã–º –∞–≤–æ–∫–∞–¥–æ –∏ –ª–∞–π–º–æ–º	35	220
K005	–ö–∞–Ω–∞–ø–µ –æ–≤–æ—â–Ω–æ–µ	–°–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ —Å —Ç–≤–æ—Ä–æ–∂–Ω—ã–º –º—É—Å—Å–æ–º –Ω–∞ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–º —Ö–ª–µ–±–µ	30	120""",
            
            '—Å–∞–ª–∞—Ç—ã_–º–µ–Ω—é.txt': """–ê—Ä—Ç–∏–∫—É–ª	–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ	–û–ø–∏—Å–∞–Ω–∏–µ	–í–µ—Å (–≥)	–¶–µ–Ω–∞ (‚ÇΩ)
S001	–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π	–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–æ–π –≥—Ä–∏–ª—å –∏ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º	200	450
S002	–°–∞–ª–∞—Ç –ì—Ä–µ—á–µ—Å–∫–∏–π	–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –≥—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç —Å —Å—ã—Ä–æ–º —Ñ–µ—Ç–∞ –∏ –º–∞—Å–ª–∏–Ω–∞–º–∏	180	380
S003	–°–∞–ª–∞—Ç —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏	–ú–∏–∫—Å —Å–∞–ª–∞—Ç–æ–≤ —Å —Ç–∏–≥—Ä–æ–≤—ã–º–∏ –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏ –∏ –∞–≤–æ–∫–∞–¥–æ	190	520
S004	–°–∞–ª–∞—Ç –û–ª–∏–≤—å–µ	–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —Å–∞–ª–∞—Ç —Å –æ—Ç–≤–∞—Ä–Ω—ã–º–∏ –æ–≤–æ—â–∞–º–∏	200	320
S005	–°–∞–ª–∞—Ç –º–∏–º–æ–∑–∞	–°–ª–æ–µ–Ω—ã–π —Å–∞–ª–∞—Ç —Å —Ä—ã–±–Ω—ã–º–∏ –∫–æ–Ω—Å–µ—Ä–≤–∞–º–∏ –∏ —è–π—Ü–∞–º–∏	180	280""",
            
            '–≥–æ—Ä—è—á–∏–µ_–∑–∞–∫—É—Å–∫–∏.txt': """–ê—Ä—Ç–∏–∫—É–ª	–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ	–û–ø–∏—Å–∞–Ω–∏–µ	–í–µ—Å (–≥)	–¶–µ–Ω–∞ (‚ÇΩ)
H001	–ú–∏–Ω–∏-—à–∞—à–ª—ã—á–æ–∫ –∏–∑ –∫—É—Ä–∏—Ü—ã	–ù–µ–∂–Ω—ã–µ –∫—É—Å–æ—á–∫–∏ –∫—É—Ä–∏–Ω–æ–≥–æ —Ñ–∏–ª–µ –Ω–∞ —à–ø–∞–∂–∫–∞—Ö	50	180
H002	–ú–∏–Ω–∏-—à–∞—à–ª—ã—á–æ–∫ –∏–∑ —Å–≤–∏–Ω–∏–Ω—ã	–°–æ—á–Ω–∞—è —Å–≤–∏–Ω–∏–Ω–∞ –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω–∞—è –≤ —Å–ø–µ—Ü–∏—è—Ö	50	200
H003	–ñ—É–ª—å–µ–Ω –≤ —Ç–∞—Ä—Ç–∞–ª–µ—Ç–∫–µ	–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∂—É–ª—å–µ–Ω —Å –≥—Ä–∏–±–∞–º–∏ –≤ —Ö—Ä—É—Å—Ç—è—â–µ–π —Ç–∞—Ä—Ç–∞–ª–µ—Ç–∫–µ	40	150
H004	–¢–µ–º–ø—É—Ä–∞ –∏–∑ –∫—Ä–µ–≤–µ—Ç–æ–∫	–ö—Ä–µ–≤–µ—Ç–∫–∏ –≤ –ª–µ–≥–∫–æ–º –∫–ª—è—Ä–µ —Ç–µ–º–ø—É—Ä–∞ —Å —Å–æ—É—Å–æ–º	60	280
H005	–ö—É—Ä–∏–Ω—ã–µ –∫—Ä—ã–ª—ã—à–∫–∏ BBQ	–ê—Ä–æ–º–∞—Ç–Ω—ã–µ –∫—Ä—ã–ª—ã—à–∫–∏ –≤ —Å–æ—É—Å–µ –±–∞—Ä–±–µ–∫—é	80	160""",
            
            '–¥–µ—Å–µ—Ä—Ç—ã_–º–µ–Ω—é.txt': """–ê—Ä—Ç–∏–∫—É–ª	–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ	–û–ø–∏—Å–∞–Ω–∏–µ	–í–µ—Å (–≥)	–¶–µ–Ω–∞ (‚ÇΩ)
D001	–ú–∏–Ω–∏-—á–∏–∑–∫–µ–π–∫	–ù–µ–∂–Ω—ã–π —á–∏–∑–∫–µ–π–∫ —Å —è–≥–æ–¥–Ω—ã–º —Ç–æ–ø–ø–∏–Ω–≥–æ–º	80	180
D002	–ú–∞–∫–∞—Ä–æ–Ω—Å	–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –º–∏–Ω–¥–∞–ª—å–Ω—ã–µ –ø–∏—Ä–æ–∂–Ω—ã–µ –∞—Å—Å–æ—Ä—Ç–∏	20	120
D003	–ü—Ä–æ—Ñ–∏—Ç—Ä–æ–ª–∏	–ó–∞–≤–∞—Ä–Ω—ã–µ –ø–∏—Ä–æ–∂–Ω—ã–µ —Å –∫—Ä–µ–º–æ–º –∏ —à–æ–∫–æ–ª–∞–¥–æ–º	60	150
D004	–§—Ä—É–∫—Ç–æ–≤–æ–µ –∫–∞–Ω–∞–ø–µ	–°–≤–µ–∂–∏–µ —Ñ—Ä—É–∫—Ç—ã –Ω–∞ —à–ø–∞–∂–∫–∞—Ö —Å –º–µ–¥–æ–≤—ã–º —Å–æ—É—Å–æ–º	50	100
D005	–¢–∏—Ä–∞–º–∏—Å—É –ø–æ—Ä—Ü–∏–æ–Ω–Ω—ã–π	–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç –≤ –ø–æ—Ä—Ü–∏–æ–Ω–Ω–æ–π –ø–æ–¥–∞—á–µ	100	220"""
        }
        
        try:
            for filename, content in sample_files.items():
                file_path = self.menu_files_dir / filename
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                logger.info(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
    
    def _categorize_items(self):
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –±–ª—é–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        self.categories = {}
        for item in self.menu_items:
            category = item.get('category', '–î—Ä—É–≥–æ–µ')
            if category not in self.categories:
                self.categories[category] = []
            self.categories[category].append(item)
    
    def _create_default_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ txt —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"""
        self.menu_items = [
            {"id": 1001, "article": "B001", "name": "–ì–æ–≤—è–∂–∏–π –±–æ–∫ –Ω–∞ –ø–æ–¥—É—à–∫–µ –∏–∑ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ-—Ç—ã–∫–≤–µ–Ω–Ω–æ–≥–æ –ø—é—Ä–µ", "category": "–ë–∞–Ω–∫–µ—Ç–Ω—ã–µ –±–ª—é–¥–∞", "price": 1150, "weight": 250, "description": "–ù–µ–∂–Ω–∞—è –≥–æ–≤—è–¥–∏–Ω–∞ –Ω–∞ –≤–æ–∑–¥—É—à–Ω–æ–º –ø—é—Ä–µ", "unit": "—à—Ç"},
            {"id": 1002, "article": "K001", "name": "–ö–∞–Ω–∞–ø–µ —Å –ª–æ—Å–æ—Å–µ–º –∏ —Å–ª–∏–≤–æ—á–Ω—ã–º —Å—ã—Ä–æ–º", "category": "–ö–∞–Ω–∞–ø–µ", "price": 180, "weight": 30, "description": "–ò–∑—ã—Å–∫–∞–Ω–Ω–æ–µ –∫–∞–Ω–∞–ø–µ —Å –∫–æ–ø—á–µ–Ω—ã–º –ª–æ—Å–æ—Å–µ–º", "unit": "—à—Ç"},
            {"id": 1003, "article": "S001", "name": "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π", "category": "–°–∞–ª–∞—Ç—ã", "price": 450, "weight": 200, "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–æ–π", "unit": "–ø–æ—Ä—Ü–∏—è"},
            {"id": 1004, "article": "H001", "name": "–ú–∏–Ω–∏-—à–∞—à–ª—ã—á–æ–∫ –∏–∑ –∫—É—Ä–∏—Ü—ã", "category": "–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏", "price": 180, "weight": 50, "description": "–ù–µ–∂–Ω—ã–µ –∫—É—Å–æ—á–∫–∏ –∫—É—Ä–∏–Ω–æ–≥–æ —Ñ–∏–ª–µ", "unit": "—à—Ç"},
            {"id": 1005, "article": "D001", "name": "–ú–∏–Ω–∏-—á–∏–∑–∫–µ–π–∫", "category": "–î–µ—Å–µ—Ä—Ç—ã", "price": 180, "weight": 80, "description": "–ù–µ–∂–Ω—ã–π —á–∏–∑–∫–µ–π–∫ —Å —è–≥–æ–¥–Ω—ã–º —Ç–æ–ø–ø–∏–Ω–≥–æ–º", "unit": "—à—Ç"}
        ]
        
        self._categorize_items()
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –º–µ–Ω—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {len(self.menu_items)} –ø–æ–∑–∏—Ü–∏–π")
    
    def get_items_for_event_type(self, event_type: str, guest_count: int, budget_per_person: Optional[float] = None) -> List[Dict[str, Any]]:
        """–ü–æ–¥–±–æ—Ä –±–ª—é–¥ –¥–ª—è —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π ID"""
        logger.info(f"üîç –ü–æ–¥–±–æ—Ä –º–µ–Ω—é: {event_type}, {guest_count} –≥–æ—Å—Ç–µ–π, –±—é–¥–∂–µ—Ç/—á–µ–ª: {budget_per_person}")
        
        # –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
        logger.info(f"üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–µ–Ω—é: {list(self.categories.keys())}")
        logger.info(f"üìä –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤ –º–µ–Ω—é: {len(self.menu_items)}")
        
        event_type = event_type.lower()
        
        # –£–ø—Ä–æ—â–∞–µ–º —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        if '–±–∞–Ω–∫–µ—Ç' in event_type:
            event_type = '–±–∞–Ω–∫–µ—Ç'
        elif '—Ñ—É—Ä—à–µ—Ç' in event_type:
            event_type = '—Ñ—É—Ä—à–µ—Ç'
        elif '–∫–æ—Ñ–µ' in event_type or '–±—Ä–µ–π–∫' in event_type:
            event_type = '–∫–æ—Ñ–µ-–±—Ä–µ–π–∫'
        elif '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤' in event_type:
            event_type = '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤'
        
        if event_type not in self.event_rules:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_type}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É—Ä—à–µ—Ç")
            event_type = '—Ñ—É—Ä—à–µ—Ç'
        
        rules = self.event_rules[event_type]
        selected_items = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –≥—Ä–∞–º–º–æ–≤–∫—É
        min_weight, max_weight = rules['–≥—Ä–∞–º–º–æ–≤–∫–∞']
        if budget_per_person:
            if budget_per_person < 2000:
                target_weight = min_weight
            elif budget_per_person > 5000:
                target_weight = max_weight
            else:
                ratio = (budget_per_person - 2000) / 3000
                target_weight = min_weight + (max_weight - min_weight) * ratio
        else:
            target_weight = (min_weight + max_weight) / 2
        
        logger.info(f"üìä –¶–µ–ª–µ–≤–∞—è –≥—Ä–∞–º–º–æ–≤–∫–∞: {target_weight}–≥/—á–µ–ª–æ–≤–µ–∫–∞")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
        positions_count = max(
            rules['–º–∏–Ω_–ø–æ–∑–∏—Ü–∏–π'],
            min(
                int(guest_count * rules['–ø–æ–∑–∏—Ü–∏–π_–Ω–∞_—á–µ–ª–æ–≤–µ–∫–∞']),
                rules['–º–∞–∫—Å_–ø–æ–∑–∏—Ü–∏–π']
            )
        )
        
        logger.info(f"üìã –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {positions_count}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        available_categories = list(self.categories.keys())
        logger.info(f"üîç –†–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {available_categories}")
        
        if not available_categories:
            logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –º–µ–Ω—é!")
            return []
        
        # –ü–æ–¥–±–∏—Ä–∞–µ–º –±–ª—é–¥–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        items_per_category = max(1, positions_count // len(available_categories))
        remainder = positions_count % len(available_categories)
        
        logger.info(f"üìã –ü–æ–∑–∏—Ü–∏–π –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {items_per_category}, –æ—Å—Ç–∞—Ç–æ–∫: {remainder}")
        
        for i, category in enumerate(available_categories):
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_positions = items_per_category
            if i < remainder:  # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
                category_positions += 1
            
            logger.info(f"üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category} ({category_positions} –ø–æ–∑–∏—Ü–∏–π)")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—é–¥–∂–µ—Ç—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            available_items = self.categories[category]
            if budget_per_person:
                max_item_price = budget_per_person * 2  # –ü—Ä–æ—Å—Ç–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                available_items = [
                    item for item in available_items 
                    if item.get('price', 0) <= max_item_price
                ]
                logger.info(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –±—é–¥–∂–µ—Ç—É: {len(available_items)} –ø–æ–∑–∏—Ü–∏–π")
            
            if not available_items:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
                continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ (—Å–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µ)
            available_items.sort(key=lambda x: x.get('price', 0))
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            for item in available_items[:category_positions]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID - —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞
                if 'id' not in item or not item['id']:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —É –±–ª—é–¥–∞: {item.get('name', 'Unknown')}")
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
                    item['id'] = len(selected_items) + 1000 + hash(item.get('name', '')) % 1000
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                item_with_quantity = item.copy()
                item_with_quantity['quantity'] = max(1, guest_count // 10)
                item_with_quantity['total_weight'] = item_with_quantity['quantity'] * item.get('weight', 0)
                selected_items.append(item_with_quantity)
                
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {item['name']} (ID: {item['id']}) x{item_with_quantity['quantity']}")
        
        logger.info(f"‚úÖ –ü–æ–¥–æ–±—Ä–∞–Ω–æ {len(selected_items)} –ø–æ–∑–∏—Ü–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ–±—Ä–∞–Ω–æ
        if not selected_items:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–ª—é–¥–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑ –≤—Å–µ–≥–æ –º–µ–Ω—é")
            # –ë–µ—Ä–µ–º –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –≤—Å–µ–≥–æ –º–µ–Ω—é
            for item in self.menu_items[:min(positions_count, len(self.menu_items))]:
                if 'id' not in item or not item['id']:
                    item['id'] = len(selected_items) + 1000 + hash(item.get('name', '')) % 1000
                
                item_with_quantity = item.copy()
                item_with_quantity['quantity'] = max(1, guest_count // 10)
                item_with_quantity['total_weight'] = item_with_quantity['quantity'] * item.get('weight', 0)
                selected_items.append(item_with_quantity)
                
                logger.info(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –æ–±—â–µ–≥–æ –º–µ–Ω—é: {item['name']} (ID: {item['id']})")
        
        return selected_items
    
    def get_menu_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–Ω—é"""
        return {
            'total_items': len(self.menu_items),
            'categories': len(self.categories),
            'categories_detail': {
                cat: len(items) for cat, items in self.categories.items()
            },
            'txt_files_count': len(self.txt_files),
            'files_list': [f.name for f in self.txt_files],
            'new_items': 0,
            'popular_items': 10
        }
    
    def get_available_categories(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        return list(self.categories.keys())
    
    def search_items(self, query: str) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –±–ª—é–¥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        query_lower = query.lower()
        results = []
        
        for item in self.menu_items:
            if (query_lower in item.get('name', '').lower() or 
                query_lower in item.get('description', '').lower() or
                query_lower in item.get('article', '').lower()):
                results.append(item)
        
        return results
    
    def get_item_by_id(self, item_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª—é–¥–∞ –ø–æ ID"""
        for item in self.menu_items:
            if item.get('id') == item_id:
                return item
        return None
    
    def get_item_by_article(self, article: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª—é–¥–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
        for item in self.menu_items:
            if item.get('article', '').upper() == article.upper():
                return item
        return None
    
    def reload_menu(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é –∏–∑ txt —Ñ–∞–π–ª–æ–≤"""
        self.menu_items = []
        self.categories = {}
        self.load_menu_from_txt_files()
        logger.info("üîÑ –ú–µ–Ω—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ txt —Ñ–∞–π–ª–æ–≤")
    
    def get_debug_info(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–µ–Ω—é"""
        debug_info = []
        
        debug_info.append("üîç –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø MenuService")
        debug_info.append("=" * 50)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–µ
        debug_info.append(f"üìÅ –ü–∞–ø–∫–∞ –º–µ–Ω—é: {self.menu_files_dir}")
        debug_info.append(f"üìÅ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {self.menu_files_dir.absolute()}")
        debug_info.append(f"üìÅ –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.menu_files_dir.exists()}")
        
        if self.menu_files_dir.exists():
            # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
            debug_info.append("\nüìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏:")
            for item in self.menu_files_dir.iterdir():
                file_type = "üìÑ —Ñ–∞–π–ª" if item.is_file() else "üìÅ –ø–∞–ø–∫–∞"
                debug_info.append(f"  {file_type}: {item.name}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        debug_info.append(f"\nüìÑ TXT —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(self.txt_files)}")
        for txt_file in self.txt_files:
            debug_info.append(f"  - {txt_file.name}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω—é
        debug_info.append(f"\nüçΩÔ∏è –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤ –º–µ–Ω—é: {len(self.menu_items)}")
        debug_info.append(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.categories)}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if self.categories:
            debug_info.append("\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π:")
            for category, items in self.categories.items():
                debug_info.append(f"  - {category}: {len(items)} –ø–æ–∑–∏—Ü–∏–π")
        else:
            debug_info.append("\n‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ù–ï –°–û–ó–î–ê–ù–´!")
        
        # –ü—Ä–∏–º–µ—Ä—ã –±–ª—é–¥
        if self.menu_items:
            debug_info.append("\nüçΩÔ∏è –ü–µ—Ä–≤—ã–µ 5 –ø–æ–∑–∏—Ü–∏–π:")
            for i, item in enumerate(self.menu_items[:5], 1):
                debug_info.append(f"  {i}. ID:{item.get('id', 'N/A')} | {item.get('article', 'N/A')} | {item.get('name', 'N/A')} | {item.get('category', 'N/A')}")
        else:
            debug_info.append("\n‚ùå –ü–û–ó–ò–¶–ò–ò –ù–ï –ó–ê–ì–†–£–ñ–ï–ù–´!")
        
        debug_info.append("\n" + "=" * 50)
        
        return "\n".join(debug_info)
    
    def force_reload_with_debug(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π"""
        logger.info("üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –° –û–¢–õ–ê–î–ö–û–ô")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.menu_items = []
        self.categories = {}
        self.txt_files = []
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        self.load_menu_from_txt_files()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"  - –§–∞–π–ª–æ–≤: {len(self.txt_files)}")
        logger.info(f"  - –ü–æ–∑–∏—Ü–∏–π: {len(self.menu_items)}")
        logger.info(f"  - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.categories)}")
        
        return self.get_debug_info()
    def _add_beverages_to_coffee_break(self, selected_items, guest_count):
        """Add mandatory beverages for coffee break"""
        import logging
        logger = logging.getLogger(__name__)
        logger.info("Checking beverages for coffee break...")
        
        # Check if beverages already exist
        has_coffee = any('–∫–æ—Ñ–µ' in item.get('name', '').lower() for item in selected_items)
        has_tea = any('—á–∞–π' in item.get('name', '').lower() for item in selected_items)
        
        if has_coffee and has_tea:
            return selected_items
        
        # Find beverages category
        beverages = []
        for category_name, items in self.categories.items():
            if any(keyword in category_name.lower() for keyword in ['–Ω–∞–ø–∏—Ç–∫–∏', 'beverages', '–∫–æ—Ñ–µ', '—á–∞–π']):
                beverages = items
                logger.info(f"Found beverages category: {category_name}")
                break
        
        # Add coffee if missing
        if beverages and not has_coffee:
            for item in beverages:
                if '–∫–æ—Ñ–µ' in item.get('name', '').lower():
                    coffee_item = item.copy()
                    coffee_item['quantity'] = guest_count
                    coffee_item['total_weight'] = guest_count * item.get('weight', 200)
                    selected_items.append(coffee_item)
                    logger.info(f"Added coffee: {item['name']}")
                    break
        
        # Add tea if missing
        if beverages and not has_tea:
            for item in beverages:
                if '—á–∞–π' in item.get('name', '').lower():
                    tea_item = item.copy()
                    tea_item['quantity'] = guest_count // 2
                    tea_item['total_weight'] = (guest_count // 2) * item.get('weight', 200)
                    selected_items.append(tea_item)
                    logger.info(f"Added tea: {item['name']}")
                    break
        
        return selected_items
